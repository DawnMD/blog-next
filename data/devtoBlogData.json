[{"type_of":"article","id":896955,"title":"What is PostCSS & Why should we care?","description":"If we visit the official website for PostCSS we can get an idea about why we might want to use...","published":true,"published_at":"2021-11-13T07:57:24.417Z","slug":"what-is-postcss-why-should-we-care-45fj","path":"/dawnind/what-is-postcss-why-should-we-care-45fj","url":"https://dev.to/dawnind/what-is-postcss-why-should-we-care-45fj","comments_count":0,"public_reactions_count":40,"page_views_count":2091,"published_timestamp":"2021-11-13T07:57:24Z","positive_reactions_count":40,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--3LjG5pjS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h35ccx2d3uxcs2rl0lu.png","canonical_url":"https://dev.to/dawnind/what-is-postcss-why-should-we-care-45fj","reading_time_minutes":3,"body_markdown":"If we visit the official website for ***PostCSS*** we can get an idea about why we might want to use ***PostCSS*** in our next project.\n>A tool for transforming CSS with JavaScript\n\nIt also comes with plugins that will enable some unreleased features, minify, etc, and makes our life much easier.\n\n#### Increase code readability\n>Add vendor prefixes to CSS rules using values from Can I Use. Autoprefixer will use the data based on current browser popularity and property support to apply prefixes for you.\n\nThis means that we don't have to apply specific prefixes for supporting Firefox, Chrome, and/ or Safari, PostCSS will do that for us.\n\n#### Use tomorrow’s CSS today\n> *PostCSS Preset Env*, lets you convert modern CSS into something most browsers can understand, determining the polyfills you need based on your targeted browsers or runtime environments, using *cssdb*.\n\nWe can use the future release version of CSS which PostCSS will convert to current CSS syntax so that it can be supported by the browser.\n\n#### The end of global CSS\n> CSS Modules means you never need to worry about your names being too generic, just use whatever makes the most sense.\n\nIt will generate a class appending a unique serial at the end so that it doesn't collide with other classes, just like `styled components`\n\n#### Avoid errors in your CSS\n> Enforce consistent conventions and avoid errors in your stylesheets with stylelint, a modern CSS linter. It supports the latest CSS syntax, as well as CSS-like syntaxes, such as SCSS.\n\n## Get started with PostCSS\n\nLet us start with setting up the `package.json` along with all the dependencies.\n\nTo generate a `package.json` all we need to do is run the command in the terminal.\n\n```\nnpm init -y\n```\n\nNext, we will add the PostCSS dependencies. We need `postcss` and  `postcss-cli`\n\n```\nnpm i postcss postcss-cli\n```\n\nFor PostCSS to actually run and also to watch the changes we need to add the scripts to the `package.json` file\n\nFolder structure\n\n![Folder structure](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vpozsnaqyd70351g7iy.png)\n \n\n```json\n...\n\"scripts\": {\n    \"dev:watch\": \"postcss src/style.css --dir public --watch\"\n  },\n...\n```\n\n### Using the first plugin\nThe first plugin that we will be using is `postcss-import` and if you're familiar with `SASS particles` then it will make sense as it's the same thing but for CSS.\n\n> This plugin can consume local files, node modules, or web_modules.\n\nTo install\n```\nnpm i postcss-import\n```\n\nTo use the plugin we need to add a postcss config file at the root of our project\n\n`postcss.config.js`\n\n![config](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9g8p6ymm04q7gf9v3co.png)\n \n\nNow we can import other CSS files into the `styles.css` file which then PostCSS will parse and make the styles available in the single output file.\n\n`src/styles.css`\n\n![input](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyck2byqaxceqfbqe9yr.png)\n\n`public/styles.css`\n\n![output](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqwzigvo84c3c1pnqx55.png)\n \nWe can also minify the CSS to reduce the size of the .css file. For that, we need `cssnano` plugin\n```\nnpm i cssnano\n```\n\nThen add the plugin to `postcss.config.js` file\n\n`postcss.config.js`\n\n![nano](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig2o84vf6c8k3kwksrpv.png)\n\nPretty neat, right?\n\nTo enable the future CSS there is also a plugin called `PostCSS Preset Env`. This plugin will take the unreleased CSS selectors and change it to the present usable CSS. More info at [PostCSS Preset Env](https://github.com/csstools/postcss-preset-env)\n\nSetting up this plugin is a little more work as we need to specify the stage of CSS we want to use. We will use the `stage 1` to enable the `& selector` inside of a class just like `SASS`.\n\nTo install the plugin\n```\nnpm i postcss-preset-env\n```\n\nNow create a future CSS:\n\n![future](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opglkhexlto3u8ts5t8u.png)\n \nIf we look closely, this is not a valid CSS **as of now** for the current specs. But if we see the output from PostCSS we can see it is changed to the CSS of the current specs:\n\n![CSS specs](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4npx0dnaaqwe2kiscx2l.png)\n \n**PostCSS** has numerous plugins that you can explore at their [plugins website](https://www.postcss.parts/)\n\nEven ***TailwindCSS*** uses PostCSS under the hood. PostCSS is a very powerful tool and can be a game-changer if it can be used correctly."},{"type_of":"article","id":810656,"title":"Persist Redux State with redux-persist","description":"When we refresh page in a web-app, the state always resets back to the initial values which in not a...","published":true,"published_at":"2021-09-01T18:31:04.205Z","slug":"persist-redux-state-with-redux-persist-3k0d","path":"/dawnind/persist-redux-state-with-redux-persist-3k0d","url":"https://dev.to/dawnind/persist-redux-state-with-redux-persist-3k0d","comments_count":0,"public_reactions_count":67,"page_views_count":25716,"published_timestamp":"2021-09-01T18:31:04Z","positive_reactions_count":67,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--AUfODUBX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc3klysevfy8gh57gbd7.png","canonical_url":"https://dev.to/dawnind/persist-redux-state-with-redux-persist-3k0d","reading_time_minutes":3,"body_markdown":"When we refresh page in a web-app, the state always resets back to the initial values which in not a good thing when you try to build some large web-app like e-commerce.\n\nWe can manually do the state persistent using the native JavaScript `localStorage.setItem()` method but honestly we will have to write everything from start and we have to maintain the structure of the state.\n\nSo here the **redux-persist** comes into play, with support for _redux toolkit_, that helps us to persist the state after page refresh.\n\n##Redux-Persist\n\nIt is a package for persisting redux state when it is connected to the store.\nThat's all what the package does. Pretty neat!\n\nWithout further talking, lets dive into how we actually hook it up  with _redux toolkit_ for state/store persisting. We will use a counter app for easier understanding.\n\n###Step 1:\n\nInstall the package via `npm` or `yarn` (I will use npm here):\n```\nnpm i redux-persist\n```\n\n###Step 2:\n\nAdd the required imports to the redux store:\n\n```js\n//store.js\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport {\n\tpersistReducer,\n\tFLUSH,\n\tREHYDRATE,\n\tPAUSE,\n\tPERSIST,\n\tPURGE,\n\tREGISTER,\n} from 'redux-persist';\n```\n\n**redux-persist** provides different storage to persist data like local storage, session storage or async storge. We will use the local storage.\n\nWe need the `combineReducers` function to group up all the reducers into one so that we can pass it to the **redux-persist**.\n\n**redux-persist** dispatches some functions and according to official redux-toolkit guide we need to add those to the ignore list to avoid unnecessary warnings or errors.\n\n###Step 3:\n\nWe need to create the persist object config that will be stored to the storage:\n\n```js\n//store.js\nconst persistConfig = {\n\tkey: 'counter',\n\tstorage,\n};\n```\n\nThe key specifies the ID of the persist object and the storage determines the type of storage being used.\n\n###Step 4:\n\nCombine the reducers:\n\n```js\n//store.js\nconst reducers = combineReducers({ counter: counterSlice });\n```\n\n###Step 5:\n\nCreate a persistent reducer:\n\n```js\n///store.js\nconst persistedReducer = persistReducer(persistConfig, reducers);\n```\n\n###Step 6:\n\nAssign the persist reducer to the reducers and extra dispatch functions to the ignore list in the middleware, at the end your store will look like this:\n\n```js\n//store.js\nexport default configureStore({\n\treducer: persistedReducer,\n\tmiddleware: (getDefaultMiddleware) =>\n\t\tgetDefaultMiddleware({\n\t\t\tserializableCheck: {\n\t\t\t\tignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n\t\t\t},\n\t\t}),\n});\n```\n\n###Step 7:\n\nJust like _react-redux_ gives us `Provider` component that will wrap the whole app, similarly we get `PersistGate` from **redux-persist**. We need it to wrap around the whole app:\n\n```js\n//index.js\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n//...\nlet persistor = persistStore(store);\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<PersistGate persistor={persistor}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n```\n\nThe `persistStore` will configure the store object to become compatible when we pass it to the `PersistGate` component.\n\n###Step 8:\n\nWith all the connection done, now your react app can persist when when page changes and or the page reloads.\n\nIf we check it with _redux-logger_, we can see that it first checks with `PERSIST` action and rehydrate the store with the `REHYDRATE` action.\n\n![redux-logger showing redux-persist](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guz1gollll1cjr4kwa8d.jpg)\n\n##Wrapping Up\n\n**redux-persist** is a great library for obvious reason, but it's way old and outdated, last update was at 2019 with several PR and issues at GitHub. I hope they revive the project and fix the necessary issues. Meanwhile, if you know any alternatives please let me know in the comments."},{"type_of":"article","id":770267,"title":"Ditch redux, Use reduxjs/toolkit","description":"Redux is a state management for different libraries like Vue, Angular, React and even vanilla...","published":true,"published_at":"2021-07-24T10:52:59.143Z","slug":"ditch-redux-use-reduxjs-toolkit-3h02","path":"/dawnind/ditch-redux-use-reduxjs-toolkit-3h02","url":"https://dev.to/dawnind/ditch-redux-use-reduxjs-toolkit-3h02","comments_count":2,"public_reactions_count":18,"page_views_count":780,"published_timestamp":"2021-07-24T10:52:59Z","positive_reactions_count":18,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--5qzlczRA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613ermzdm4xyz5r16rf5.png","canonical_url":"https://dev.to/dawnind/ditch-redux-use-reduxjs-toolkit-3h02","reading_time_minutes":4,"body_markdown":"Redux is a state management for different libraries like Vue, Angular, React and even vanilla JavaScript, etc. For the past few years, people and companies are considering Redux as their first and foremost priority library for managing states inside of a web application.\n\n## Why Redux?\n\nIt mainly gained its fame for particularly two things:\n\n> Redux helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.\n\nThat means no unintentional re-rendering of the components and no prop drilling to child components.\n\n> Centralizing your application's state and logic enables powerful capabilities like undo/redo, state persistence, and much more.\n\nChange the state of the application from any of the child components no matter how deep they are nested.\n\nBut for gaining so much power, we need to take some precautions. Those are:\n\n* **Do Not Mutate State**\n\nWe will never mutate the state, no matter what our needs are. Instead, we can take snapshots and manipulate that. That means we can't use functions like `array.push()`.\n\n* **Only Store Per-App**\n\nWe will never have more than one global store.\n\n* **The Reducer Will Always be Pure Functions And Must Not Have Any Side Effects**\n\nWe will never always return an object from the reducers and it will never perform asynchronous tasks. Later, this problem is solved by **redux-thunk** which checks, executes any async functions, and returns a plain object from that response.\n\nLike all things, it has pros and cons too.\n\nAs with the pros, **redux** gained fame for being one of the best state management libraries, but lately, it was very difficult to maintain because of the boilerplate as we have to write all the reducers, action constants, action creators, and the store. Also, there are a lot of files for each collection of reducers.\n\n## Cons of redux:\n\n* In a very large web app, where we have to fetch data constantly from an API, it's not always easy to add those to existing data without accidentally mutating the state.\n\n* Boilerplate codes\n\n**Action Constants**\n\n```js\nconst ADD_TODO = 'ADD_TODO';\n```\n**Action Creators**\n\n```js\nconst addTodo = (title) => {\n  return {\n           type: ADD_TODO,\n           payload: title,\n         }\n}\n```\n\n**Reducers Without Mutating State**\n\n```js\nconst todoReducer = (state=[],action) => {\n  switch(action.type){\n    case ADD_TODO:\n      return [action.payload,...state];\n    default:\n      return state;\n  }\n}\n```\n\n**Combine Reducers**\n\n```js\nrootReducer = combineReducers({todo: todoReducer})\n```\n\nFor some simple tasks we needed to keep a lot of stuff in mind and on top of that we had to follow a massive boilerplate.\n\n## Reduxjs/Toolkit aka Redux Starter Kit\n\nAt the end of 2019, taking people's opinion on the problem of managing a redux application is a big challenge the developers came out with **Redux Starter Kit** which after named as **reduxjs/toolkit** which was supposed to solve the problems we were having with default redux applications.\n\n> Includes utilities to simplify common use cases like store setup, creating reducers, immutable update logic, and more.\n\nWe no longer need to write out action creators (apart from thunk functions) and actions constants, it will be generated by the toolkit itself.\n\n> Takes inspiration from libraries like Immer and Autodux to let you write \"mutative\" immutable update logic, and even create entire \"slices\" of state automatically.\n\nFinally, we can mutate the state (not really). Redux uses **Immer** in the background to convert our mutate code to immutable code.\n\n> Provides good defaults for store setup out of the box, and includes the most commonly used Redux addons built-in.\n\nNo longer do we need to add packages like redux-thunk and redux-devtools as it is already included in the toolkit.\n\nIt solves most of the problems and made redux much easier to write.\n\n\nRedux Toolkit gives us a hook `createSlice()` in which we can mention our `action name`, `initials state`, `reducers` and the state for async data fetching i.e pending, fulfilled, or rejected.\n\n```js\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = []\n\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state,action) => {\n      state.push(action.payload)\n    },\n  },\n})\n\nexport const todoActions = todoSlice.actions\nexport default todoSlice.reducer\n```\n\nWe wrote the code that would have took 2-3 files in redux is just finished in one file with not more than 15 lines of code. Also, we mutated the state but redux didn't throw any error as it is being converted to immutable code in the background.\n\n### Async Data Fetch\n\n**Reduxjs/toolkit** also provides a hook `createAsyncThunk()` for async thunk functions which we have to manually export action.\n\n```js\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n```\n\nWe can trigger some side-effects when the request is `pending`, `rejected` or `fulfilled`\n\n```js\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: {\n    [fetchUserById.rejected]:(state,action) => {\n      //Some functions or notifications if there is an error\n    },\n    [fetchUserById.pending]:(state,action) => {\n      //Some functions or notifications if req is going through\n    },\n    [fetchUserById.fulfilled]:(state,action) => {\n      //Some functions or notifications is res is back as successful\n    },\n  },\n})\n```\n\nSo, we can say _**reduxjs/toolkit**_ is a major improvement over the default **redux**."},{"type_of":"article","id":758243,"title":"Authentication with credentials using Next-Auth and MongoDB - Part 2","description":"In the last part, I created the signup, login and route along with the and the connection of frontend...","published":true,"published_at":"2021-07-15T18:03:22.384Z","slug":"authentication-with-credentials-using-next-auth-and-mongodb-part-2-2g8k","path":"/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-2-2g8k","url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-2-2g8k","comments_count":12,"public_reactions_count":43,"page_views_count":13749,"published_timestamp":"2021-07-15T18:03:22Z","positive_reactions_count":43,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ajMUqc_c--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1enbnap65j6g1ypo3gu.png","canonical_url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-2-2g8k","reading_time_minutes":4,"body_markdown":"In the [last part](https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38), I created the signup, login and route along with the and the connection of frontend to the backend. Also, I created the sign-in logic using next-auth.\n\nIn this part, I'll mainly focus on the frontend connection using next-auth.\n\n## Posting sign in logic\n\nThe next-auth client gives us both `signIn()` and `signOut()` hooks that will make our coding a whole lot easier and our only work is to provide the authentication type we will use to sign-in (in our case i.e `credentials`).\n\n> Using the `signIn()` method ensures the user ends back on the page they started on after completing a sign-in flow. It will also handle CSRF Tokens for you automatically when signing in with email.\n\nThe sign-in hook will always return a `Promise` containing an error key:value pair that will tell us if the authentication is successful or not.\n\nYou can look into more detail [here](https://next-auth.js.org/getting-started/client#signin).\n\n```js\nimport { signIn } from 'next-auth/client';\n//...\nconst status = await signIn('credentials', {\n\t\t\t\tredirect: false,\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t});\n\t\t\tconsole.log(status);\n```\nAnd that's our sign-in logic in place.\n\n## But wait, it's not all\n\nSuppose, you're signed in but trying to access the route `.../auth` which normally shows us the sign-in or sign-up form.\n\nTo protect that route, next-auth also gives us a `getSession()` hook to check for the session and determine whether a user is signed in or not.\n\n```js\nimport { getSession } from 'next-auth/client';\n```\n\n> NextAuth.js provides a `getSession()` method which can be called a client or server-side to return a session.\n\n> It calls /api/auth/session and returns a promise with a session object, or null if no session exists.\n\nMore info [here](https://next-auth.js.org/getting-started/client#getsession)\n\n### Now, let's add this to our `.../auth` route:\n\nWe will use `useEffect()` and `useState()` hooks to tell user that something is loading. As `getSession()` returns a promise we need a then chain for getting the session object. If there is a session we will use `next/router` to redirect the users to `/` page.\n\n```jsx\n//...\nconst [loading, setLoading] = useState(true);\n\tconst router = useRouter();\n\tuseEffect(() => {\n\t\tgetSession().then((session) => {\n\t\t\tif (session) {\n\t\t\t\trouter.replace('/');\n\t\t\t} else {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t});\n\t}, []);\n\tif (loading) {\n\t\treturn <p>Loading...</p>;\n\t}\n//...\n```\n\n## Protect a secured route\n\nOn the change password page, we need an authenticated user to do the action, and if any unauthenticated user visits `../profile` they will be redirected to the auth page for sign-in or sign-up.\n\nThe `getSession()` hook can also be used on the server to check for sessions and do any redirect based on that.\n\nWe will use the hook along with `getServerSideProps` for checking the session of the user trying to access.\n\n_**NOTE**_ \n\nWhen calling getSession() server side, you need to pass {req} or context object.\n\n### For securing `.../profile` page:\n\n```js\nexport async function getServerSideProps(context) {\n\tconst session = await getSession({ req: context.req });\n\tif (!session) {\n\t\treturn {\n\t\t\tredirect: {\n\t\t\t\tdestination: '/auth',\n\t\t\t\tpermanent: false,\n\t\t\t},\n\t\t};\n\t}\n\treturn {\n\t\tprops: { session },\n\t};\n}\n```\n\nWith all the sign-in and sign-up logic in place, now we will look into the Header for showing and hiding the tabs based on user sign-in or not. And finally the sign-out logic.\n\n## Dynamic navbar tabs\n\nThe `useSession` hook from next-auth is the best way to check for an authenticated user. The hook gives us a session and loading state that will be updated based on fetching the users' session.\n\n```js\nimport { useSession } from 'next-auth/client';\n```\n\nWe will use the session to show and hide the tabs.\n\n```jsx\nfunction MainNavigation() {\n\tconst [session, loading] = useSession();\n\treturn (\n\t\t<header className={classes.header}>\n\t\t\t<Link href='/'>\n\t\t\t\t<a>\n\t\t\t\t\t<div className={classes.logo}>Next Auth</div>\n\t\t\t\t</a>\n\t\t\t</Link>\n\t\t\t<nav>\n\t\t\t\t<ul>\n\t\t\t\t\t{!session && !loading && (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link href='/auth'>Login</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)}\n\t\t\t\t\t{session && (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link href='/profile'>Profile</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)}\n\t\t\t\t\t{session && (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<button >Logout</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</header>\n\t);\n}\n\nexport default MainNavigation;\n```\n\nAfter noticing a bit we will see there's a flickering in the navbar tabs. That's because it's checking for the session twice. Next-auth has a workaround for this also. It provides a `<Provider>` component that shares the session object across multiple components and as a result, `useSession` doesn't have to check for session twice.\n\n```js\nimport { Provider } from 'next-auth/client';\n```\n\n> Using the supplied React `<Provider>` allows instances of `useSession()` to share the session object across components, by using `React Context` under the hood.\n\n> This improves performance, reduces network calls, and avoids page flicker when rendering. It is highly recommended and can be easily added to all pages in Next.js apps by using `pages/_app.js`.\n\nWe can pass the session object to the `<Provider>` component as a prop to avoid checking twice.\n\n> If you pass the session page prop to the `<Provider>` you can avoid checking the session twice on pages that support both server and client-side rendering.\n\n### Let's add this to our `_app.js`:\n\n```jsx\n<Provider session={pageProps.session}>\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n</Provider>\n```\n\nNow, the header will no longer flicker.\n\nLet's check the sign-out logic.\n\n## Sign Out\n\nNext-auth also gives us a `signOut()` hook that we can attach with any element `onClick()` prop and it will just sign us out. It's as easy as that.\n\nMore info [here](https://next-auth.js.org/getting-started/client#signout).\n\n```jsx\n<li>\n    <button onClick={signOut}>Logout</button>\n</li>\n```\n\nAnd that's how we implement authentication with credentials in Next.js."},{"type_of":"article","id":758241,"title":"Authentication with credentials using Next-Auth and MongoDB - Part 1","description":"Authentication can be a bit sketchy sometimes as we have to keep so much in mind, like session...","published":true,"published_at":"2021-07-13T15:32:35.792Z","slug":"authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","path":"/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","comments_count":13,"public_reactions_count":72,"page_views_count":28797,"published_timestamp":"2021-07-13T15:32:35Z","positive_reactions_count":72,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fxFPWLpP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h18te2tbg7c4w3uubxy0.png","canonical_url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","reading_time_minutes":5,"body_markdown":"Authentication can be a bit sketchy sometimes as we have to keep so much in mind, like session management, protecting several routes/pages, hashing passwords, validating user's credentials during sign-up and sign-in. Also, creating an authentication from scratch can be a lot of work.\n\nIf you're working with Next.JS, then you should try using [Next-Auth](https://next-auth.js.org/) as it provides many authentication schemes like JWT, cookie, etc. And also using third-party authentication providers like Google, Facebook, and (yes!) even with Discord.\n\nAlso, next-auth helps in session management so that the server can't be tricked easily.\n\nProviders aside, we will be looking into setting up authentication based on users' credentials like email and password.\n\n## Things to consider during authentication\n\n1. Client form validation\n2. Server form value validation\n3. Hashing users' passwords during sign-up for the obvious reason\n4. Storing into a database\n5. Checking of the hashed password during sign-in\n6. Protecting routes for the non-authenticated user\n7. Proper error handling for both frontend and backend\n\n## Packages we need\n\nI am using Next.js as the framework for the demonstration.\n\n### Along with that\n\n* **next-auth** for authentication\n* **bycryptjs** for hashing the passwords\n* **mongodb** for MongoDB functions\n\n_**NOTE**_ \n\nThis is not a frontend tutorial so I'll not be covering any notifications on successful events and/or CSS stuff.\n\n## Website scaffolding\n\nThe website is very simple consisting of 4 pages and obviously a navbar for better demonstration:\n\n* Homepage\n\n![Homepage](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rb0mvdq1zitarwmp8l1.png)\n\n* Sign In / Sign Up page\n\n![Sign In / Sign Up page](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrk75irq9a4gx8gvhbqy.png)\n\n* Change password page\n\n![Change password page](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntre9injcpyzhbs4fmf.png)\n\n## Install packages and setting up database\n\n```\nnpm i next-auth mongodb bcryptjs\n```\n\nDuring install, we will sign up for a free MongoDB account on their website.\n\nNow, we can connect to that database using the connect code from their dashboard. We should use the MongoURL from inside of a `.env.local` file for more refined and secure code.\n\n## Sign Up Route\n\nBefore sign-in, users need to signup for that particular website. NextJS provides us to write API codes in the `pages/api` folder using the NodeJS environment. It will also follow the same folder-structured route.\n\nFor the sign-up route, we will create a route `pages/api/auth/signup.js`. We also need to make sure that only the **POST** method is accepted and nothing else.\n\n### Things to do in the signup route\n\n* Get users credentials\n* Validate\n* Send error code if any\n* Connect to database\n* Check if any existing user is present with the same email address\n* Hash password using bycrypt js\n\nbycrypt js returns a **Promise** during hashing of password so we need to **await** for the response.\n\n```js\npassword: await hash(password, 12)\n//hash(plain text, no. of salting rounds)\n```\n\n* If all goes well, send a response and close connection with the database\n\n```js\nimport { MongoClient } from 'mongodb';\nimport { hash } from 'bcryptjs';\nasync function handler(req, res) {\n\t//Only POST mothod is accepted\n\tif (req.method === 'POST') {\n\t\t//Getting email and password from body\n\t\tconst { email, password } = req.body;\n\t\t//Validate\n\t\tif (!email || !email.includes('@') || !password) {\n\t\t\tres.status(422).json({ message: 'Invalid Data' });\n\t\t\treturn;\n\t\t}\n\t\t//Connect with database\n\t\tconst client = await MongoClient.connect(\n\t\t\t`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_CLUSTER}.n4tnm.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`,\n\t\t\t{ useNewUrlParser: true, useUnifiedTopology: true }\n\t\t);\n\t\tconst db = client.db();\n\t\t//Check existing\n\t\tconst checkExisting = await db\n\t\t\t.collection('users')\n\t\t\t.findOne({ email: email });\n\t\t//Send error response if duplicate user is found\n\t\tif (checkExisting) {\n\t\t\tres.status(422).json({ message: 'User already exists' });\n\t\t\tclient.close();\n\t\t\treturn;\n\t\t}\n\t\t//Hash password\n\t\tconst status = await db.collection('users').insertOne({\n\t\t\temail,\n\t\t\tpassword: await hash(password, 12),\n\t\t});\n\t\t//Send success response\n\t\tres.status(201).json({ message: 'User created', ...status });\n\t\t//Close DB connection\n\t\tclient.close();\n\t} else {\n\t\t//Response for other than POST method\n\t\tres.status(500).json({ message: 'Route not valid' });\n\t}\n}\n\nexport default handler;\n```\n\nNow that our signup route is in place, it's time to connect the frontend to the backend.\n\n## Posting Sign Up form\n\n```js\nimport { signIn } from 'next-auth/client';\n//...\nconst onFormSubmit = async (e) => {\n\t\te.preventDefault();\n\t\t//Getting value from useRef()\n\t\tconst email = emailRef.current.value;\n\t\tconst password = passwordRef.current.value;\n\t\t//Validation\n\t\tif (!email || !email.includes('@') || !password) {\n\t\t\talert('Invalid details');\n\t\t\treturn;\n\t\t}\n\t\t//POST form values\n\t\tconst res = await fetch('/api/auth/signup', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t}),\n\t\t});\n\t\t//Await for data for any desirable next steps\n\t\tconst data = await res.json();\n\t\tconsole.log(data);\n\t};\n//...\n```\n\nWith the Sign Up login in place, let's work with the Sign In logic.\n\n## Sign In using Next-Auth\n\nNext-Auth provides us with **Client API** as well as **REST API**\n\n> The [NextAuth.js client](https://next-auth.js.org/getting-started/client) library makes it easy to interact with sessions from React applications.\n\n> NextAuth.js exposes a [REST API](https://next-auth.js.org/getting-started/rest-api) which is used by the NextAuth.js client.\n\nWe will use both for signing in the users.\n\n> To add NextAuth.js to a project create a file called `[...nextauth].js` in `pages/api/auth`.\n\n> All requests to `/api/auth/*` (signin, callback, signout, etc) will automatically be handed by NextAuth.js.\n\nWith this help from next-auth, we need to implement our own sign-in logic for checking users stored on the database.\n\n### Things to do in the sign-in route:\n\n* Configure to use JWT\n* Specify provider from next-auth (Credentials)\n\nFor more providers, [check](https://next-auth.js.org/configuration/providers)\n\n* Connect to database\n* Check if the user is present\n* Send error response if any\n* Compare hashed password with the password stored on DB\n* Send response\n* Close DB connection\n\nIn `[...nextauth].js`:\n\n```js\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { MongoClient } from 'mongodb';\nimport { compare } from 'bcryptjs';\n\nexport default NextAuth({\n\t//Configure JWT\n\tsession: {\n\t\tjwt: true,\n\t},\n\t//Specify Provider\n\tproviders: [\n\t\tProviders.Credentials({\n\t\t\tasync authorize(credentials) {\n\t\t\t\t//Connect to DB\n\t\t\t\tconst client = await MongoClient.connect(\n\t\t\t\t\t`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_CLUSTER}.n4tnm.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`,\n\t\t\t\t\t{ useNewUrlParser: true, useUnifiedTopology: true }\n\t\t\t\t);\n\t\t\t\t//Get all the users\n\t\t\t\tconst users = await client.db().collection('users');\n\t\t\t\t//Find user with the email\t\n\t\t\t\tconst result = await users.findOne({\n\t\t\t\t\temail: credentials.email,\n\t\t\t\t});\n\t\t\t\t//Not found - send error res\n\t\t\t\tif (!result) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tthrow new Error('No user found with the email');\n\t\t\t\t}\n\t\t\t\t//Check hased password with DB password\n\t\t\t\tconst checkPassword = await compare(credentials.passowrd, result.passowrd);\n\t\t\t\t//Incorrect password - send response\n\t\t\t\tif (!checkPassword) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tthrow new Error('Password doesnt match');\n\t\t\t\t}\n\t\t\t\t//Else send success response\n\t\t\t\tclient.close();\n\t\t\t\treturn { email: result.email };\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n"},{"type_of":"article","id":754965,"title":"Tailwind's class based dark mode in Next.JS","description":"Tailwindcss   One of the best utility-based CSS frameworks I've ever used, period. It...","published":true,"published_at":"2021-07-09T19:55:55.662Z","slug":"tailwind-s-class-based-dark-mode-in-next-js-47gh","path":"/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","url":"https://dev.to/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","comments_count":0,"public_reactions_count":9,"page_views_count":324,"published_timestamp":"2021-07-09T19:55:55Z","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ezzR70_g--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iud5nmey5wo16adnajvz.png","canonical_url":"https://dev.to/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","reading_time_minutes":3,"body_markdown":"## Tailwindcss\n\nOne of the best utility-based CSS frameworks I've ever used, period. It provides all the necessary CSS properties with values and we ourselves have to design. It's much more awesome than Bootstrap or ChakraUI as it doesn't push us to use the component structure.\n\n> Because Tailwind is so low-level, it never encourages you to design the same site twice. Even with the same color palette and sizing scale, it's easy to build the same component with a completely different look in the next project.\n\n## How to enable class-based dark mode for Next.Js?\n\nIn the tailwindcss docs for dark mode, it provides only a basic snippet about what to write on page load for a specific page but it doesn't provide any example or docs for the framework.\n\n* To enable class-based dark mode we first have to override the value of the `darkMode` key from `false` to `'class'` in `tailwind.config.js` file.\n\n```js\nmodule.exports = {\ndarkMode: 'class',\n// ...\n}\n```\n\n* We have to edit the `_app.js` file to check if dark mode is applied or not before mounting the actual component to the DOM. For that, we will use `useEffect` from react just before returning the component.\n\nIn `_app.js`:\n\n```jsx\nimport '../styles/globals.css';\nimport { useEffect } from 'react';\nfunction MyApp({ Component, pageProps }) {\n\tuseEffect(() => {\n\t\tif (\n\t\t\tlocalStorage.theme === 'dark' ||\n\t\t\t(!('theme' in localStorage) &&\n\t\t\t\twindow.matchMedia('(prefers-color-scheme: dark)').matches)\n\t\t) {\n\t\t\t//check if there is any key for theme in local storage and if the system color theme is dark\n\t\t\tdocument.documentElement.classList.remove('light'); //OPTIONAL - remove light from the html document if any\n\t\t\tdocument.documentElement.classList.add('dark'); // add dark to the <html></html> itself as <html class='dark'></html>\n\t\t} else {\n\t\t\tdocument.documentElement.classList.remove('dark'); // remove dark from the html document if any\n\t\t\tdocument.documentElement.classList.add('light'); //OPTIONAL - add light to the <html></html> itself as <html class='light'></html>\n\t\t}\n\t},[]);\n\treturn <Component {...pageProps} />;\n}\n\nexport default MyApp;\n\n``` \n\nThis will add class to html before component mounting.\n\n![light class to html](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevpzbox7uxo2l6a0w3.png)\n\n![dark class to html](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8jc5625dn6b7yoyt2uw.png)\n\n* We also need a theme toggler button. Add our desired toggle button and we have to keep in mind that we need two buttons one for dark and one for light mode\n\nIn `ThemeSwitch.jsx`:\n\n```jsx\nimport { useEffect, useState } from 'react';\n\nconst isDark = () => //Function that will return boolean if any of the condition is satisfied\n\t(localStorage && localStorage.theme === 'dark') || //Condition 1 - has local storage and theme = dark in local storage is found\n\t(!('theme' in localStorage) &&\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').matches); //Condition 2 - No theme key in local storage but media color scheme is dark\n\nconst getTheme = (isDark) => (isDark ? 'dark' : 'light'); //Function to return 'dark' or 'light' string\n\nconst ThemeSwitch = () => { \n\tconst [darkMode, setDarkMode] = useState(false); //State for holding theme status\n\n\tconst toggleMode = () => { //onClick handler for changing theme on button press\n        localStorage.theme = getTheme(!darkMode); //setting up local storage theme value\n\t\tif (localStorage.theme === 'dark') { // If theme is 'dark'\n\t\t\tdocument.documentElement.classList.remove('light'); // remove 'light' from html class\n\t\t\tdocument.documentElement.classList.add('dark'); // add 'dark' to html class\n\t\t} else { // if not 'dark'\n\t\t\tdocument.documentElement.classList.remove('dark'); // remove 'dark' from html class\n\t\t\tdocument.documentElement.classList.add('light'); //add 'light' to html class\n\t\t}\n\t\tsetDarkMode(!darkMode); //set dark mode state to opposite of initial value\n\t};\n\n\tuseEffect(() => {\n\t\tsetDarkMode(isDark()); //before page mount set the value of dark mode by observing theme in local storage\n\t}, []);\n\n\tconst darkModeActive =\n        process.browser && document.documentElement.classList.contains('dark'); // returns true if its a client and 'dark' is present in html\n        // process.browser is deprecated can be written as typeof window === 'undefined'\n\treturn (\n\t\t<>\n\t\t\t<button className='w-10 h-10 focus:outline-none' onClick={toggleMode}>\n\t\t\t\t<span className='sr-only'>Color mode switch button</span>\n\t\t\t\t{darkModeActive ? ( //switch mode icon according to html class 'dark' or 'light'\n\t\t\t\t\t// Light Icon Svg\n\t\t\t\t) : (\n\t\t\t\t\t// Dark Icon Svg\n\t\t\t\t)}\n\t\t\t</button>\n\t\t</>\n\t);\n};\nexport default ThemeSwitch;\n\n```\n\nNow you can add the theme switch in the navbar of your layout and can change the theme on any page.\n\n_**Note**_: Don't forget to add `dark:some-value` in the class names if you want manual control over CSS."},{"type_of":"article","id":754051,"title":"CSS Specificity","description":"Specificity in CSS   CSS Specificity is the set of rules applied to CSS selectors in order...","published":true,"published_at":"2021-07-09T11:17:51.453Z","slug":"css-specificity-4n49","path":"/dawnind/css-specificity-4n49","url":"https://dev.to/dawnind/css-specificity-4n49","comments_count":0,"public_reactions_count":3,"page_views_count":76,"published_timestamp":"2021-07-09T11:17:51Z","positive_reactions_count":3,"cover_image":null,"canonical_url":"https://dev.to/dawnind/css-specificity-4n49","reading_time_minutes":3,"body_markdown":"## Specificity in CSS\n\nCSS Specificity is the set of rules applied to CSS selectors in order to determine which style is applied to an element. The more specific a CSS style is, the higher the point value it accrues, and the likelier it is to be present on the element’s style.\n\n**Example**:\n\n```html\n<a class=\"container\">Some text</a>\n```\n\nIn CSS, we can specify like:\n\n```css\n.container {\n  color: blue;\n}\n```\n\nalso, we can target the paragraph tags like:\n\n```css\na {\n  color: red;\n}\n```\n\nBy understanding how styles are applied, we can ensure the styles we want to display are being rendered.\n\nBy taking CSS Specificity into account, we ensure that our code is organized, and our selectors won’t conflict with one another.\n\n## Specificity Rules\n\n* CSS style implemented by referencing outside stylesheet that has the lowest precedence and is overridden by Internal and inline CSS.\n* Internal CSS is overridden by inline CSS.\n* Inline CSS has the highest priority and overrides all other selectors.\n\n```html\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n    <style type=\"text/css\">\n      h1 {\n        background-color: black;\n        color: red;\n      }\n\n      h2 {\n        color: goldenrod;\n      }\n    </style>\n  </head>\n\n  <body>\n    <h1>\n      The specifity of internal CSS written on HTML style block is more than\n      that of external stylesheet\n    </h1>\n    <h2 style=\"color: pink;\">\n      Inline styles overides all other css styles\n    </h2>\n  </body>\n</html>\n```\n_**Output**_:\n\n![CSS Specifity](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwchz9zr10ppsway9ylk.png)\n\n## CSS Specificity Hierarchy\n\nAll selectors have a position in the Hierarchy tree of specificity.\n\nHigh -> Low :\n\n* **Inline style** : Connected directly to the element to be styled.\n_Example_: `<h1 style=”color: #ffffff;”>`\n\n* **ID**s: ID is a unique identifier for an element.\n_Example_: `#navbar`\n\n* **Classes, attributes and pseudo-classes**: Includes .classes, [attributes] and pseudo-classes like :hover, :focus etc.\n\n* **Elements and pseudo-elements**: Includes element names and pseudo-elements like h1, div, :before and :after.\n\n## Calculate Specificity\n\nStart with 0, then add 1000 for style attribute, add 100 for each of the IDs, then add 10 for each of the attributes attribute, class, or pseudo-class, and finally add 1 for each of the element name or pseudo-element.\n\n```\nh1\n#content h1\n<div id=\"content\"><h1 style=\"color: #ffffff\">Heading</h1></div>\n```\n\nThe specificity of `h1` is 1 (one element)\nThe specificity of `#content h1` is 101 (one ID reference and one element)\nThe specificity of `<div id=\"content\"><h1 style=\"color: #ffffff\">Heading</h1></div>` is 1000 (inline styling)\n\nAs 1 < 101 < 1000, the third rule (C) has a greater level of specificity, and hence it will be implemented.\n\n## How Does it Work?\n\n* **Type Selectors & Pseudo-Element**\n\n![Type Selectors & Pseudo-Element](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bg075xdg5rfoopo07h.png)\n\n_Example_:\n\n```css\np {\n} /* 0 0 0 1 */\nspan {\n} /* 0 0 0 1 */\np span {\n} /* 0 0 0 2 */\np > span {\n} /* 0 0 0 2 */\ndiv p > span {\n} /* 0 0 0 3 */\n```\n\n* **Class Selectors, attribute selectors, and pseudo-class selectors**\n\n![Class Selectors, attribute selectors, and pseudo-class selectors](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilmgnnsrnrqv8j2qstln.png)\n\n_Example_:\n\n```css\n.name {\n} /* 0 0 1 0 */\n.users .name {\n} /* 0 0 2 0 */\n[href$='.pdf'] {\n} /* 0 0 1 0 */\n:hover {\n} /* 0 0 1 0 */\n```\n\n* **ID selectors**:\n\n![ID selectors](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imylkthraj15yz41our4.png)\n\n_Example_:\n\n```css\n#name {\n} /* 0 1 0 0 */\n.user #name {\n} /* 0 1 1 0 */\n#name span {\n} /* 0 1 0 1 */\n```\n\nAlso, there is in-line styling which doesn’t use any CSS rather specify the style in-line with the HTML.\n\n_Example_:\n\n```html\n<p style=\"color: red\">Test</p> /* 1 0 0 0 */\n```\n\n## !important Rule\n\nThere is another property !important that doesn’t follow any specificity rather it is applied overriding all the CSS properties and specificities.\n\n```css\np {\n  font-size: 20px !important;\n}\n```\n\n## Tips on CSS Specificity\n\n* The universal selector (*) has no specificity value (0,0,0,0)\n\n* Pseudo-elements (e.g. :first-line) get 0,0,0,1 unlike their psuedo-class brethren which get 0,0,1,0\n\n* There’s a highly debatable topic related to using `!important` it overrides all the CSS values. It is also a good practice not to use any id selectors and !important but class selectors.\n\n* The pseudo-class : not() adds no specificity by itself, only what’s inside its parentheses."},{"type_of":"article","id":753523,"title":"How to Setup Tailwind with PurgeCSS and PostCSS?","description":"Tailwind Installation   We have to install tailwind via npm or yarn:    npm init -y npm...","published":true,"published_at":"2021-07-08T10:02:37.367Z","slug":"how-to-setup-tailwind-with-purgecss-and-postcss-3341","path":"/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","url":"https://dev.to/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","comments_count":3,"public_reactions_count":10,"page_views_count":11033,"published_timestamp":"2021-07-08T10:02:37Z","positive_reactions_count":10,"cover_image":null,"canonical_url":"https://dev.to/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","reading_time_minutes":3,"body_markdown":"## Tailwind Installation\n\nWe have to install tailwind via npm or yarn:\n\n```\nnpm init -y\nnpm install tailwindcss\n```\n\n## Create the Configuration File\n\nWe have to create a configuration for a tailwind to use:\n\n```\nnpx tailwind init\n```\n\nThis will create a file named tailwind.config.js in the root location of our project folder.\n\n## PostCSS Config Tailwind\n\nTailwind needs PostCSS (PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations) and autoprefixer (Autoprefixer will use the data based on current browser popularity and property support to apply prefixes for you) to work. So we need to apply that in the postcss.config.js file:\n\n```js\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    require('autoprefixer')\n  ]\n}\n```\n\n_**Note**_: If the postcss.config.js doesn’t exist, we have to create one.\n\nWe need to install PostCSS and autoprefixer from npm too:\n\n```\nnpm install autoprefixer\nnpm install -g postcss-cli\n```\n\n## How to Create the Tailwind CSS File?\n\nNow, we will create a CSS file `(style.css)` and add these lines at the top:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n## Create the build command\n\nWe need to specify a build command that will help us to generate the actual CSS file after compiling with PostCSS and autoprefixer. For that, we need to add the command to the `package.json` file at scripts like:\n\n```js\n\"scripts\": {\n  \"build:css\": \"postcss src/tailwind.css -o static/dist/tailwind.css\"\n}\n```\n\n## Build Tailwind\n\nFor building the final CSS file we need to run the command `npm run build` in the root of the project folder.\n\nThe resulting file is in `static/dist/tailwind.css`\n\n### Automatically regenerate the CSS upon file changes\n\nThere is a great npm package that will compile our CSS in real-time without running the build command every time after edits. For that we need to install the watch using the command:\n\n```\nnpm install watch\n```\n\nThen we need to edit the `package.json` file at scripts like:\n\n```js\n\"scripts\": {\n  \"build:css\": \"postcss src/tailwind.css -o static/dist/tailwind.css\",\n  \"watch\": \"watch 'npm run build:css' ./layouts\"\n}\n```\n\nNow for running we simply need to execute the command `npm run watch` and it’s all good.\n\n## Trim the File Size\n\nIf we check the final CSS file i.e after building, we can see that it’s huge in size. That large file is never appropriate for web pages. For that, we can actually trim the file to make it smaller than the original.\n\nWe need to install two more npm packages:\n\n```\nnpm install cssnano\nnpm install @fullhuman/postcss-purgecss\n```\n\n### What is PurgeCSS?\n\nPurgeCSS is a development tool used for removing the unused CSS in a Project. It is the default library to control the Tailwind CSS Bundle Sizes. It removes unused styles and optimizes CSS Build Sizes.\n\n## How to Remove Unused Classes from Tailwind with PurgeCSS?\n\nTo remove unused CSS we use the following code. Then we add this to our PostCSS configuration file `postcss.config.js`:\n\n```js\nconst purgecss = require('@fullhuman/postcss-purgecss')\nconst cssnano = require('cssnano')\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    require('autoprefixer'),\n    cssnano({\n      preset: 'default'\n    }),\n    purgecss({\n      content: ['./layouts/**/*.html', './src/**/*.vue', './src/**/*.jsx'],\n      defaultExtractor: content => content.match(/[\\w-/:]+(?<!:)/g) || []\n    })\n  ]\n}\n```\n\n### In development, avoid too much processing\n\nIn development, we can use this just to add prefixes and remove comments. We need to edit the `postcss.config.js` like:\n\n```js\nconst purgecss = require('@fullhuman/postcss-purgecss')\nconst cssnano = require('cssnano')\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    process.env.NODE_ENV === 'production' ? require('autoprefixer') : null,\n    process.env.NODE_ENV === 'production'\n      ? cssnano({ preset: 'default' })\n      : null,\n    purgecss({\n      content: ['./layouts/**/*.html', './src/**/*.vue', './src/**/*.jsx'],\n      defaultExtractor: content => content.match(/[\\w-/:]+(?<!:)/g) || []\n    })\n  ]\n}\n```"},{"type_of":"article","id":751632,"title":"CSS3 selectors Cheat Sheet","description":"CSS Selectors   CSS selectors are utilized to select the content you need to style. In CSS...","published":true,"published_at":"2021-07-06T19:52:04.113Z","slug":"css3-selectors-cheat-sheet-6dk","path":"/dawnind/css3-selectors-cheat-sheet-6dk","url":"https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk","comments_count":2,"public_reactions_count":44,"page_views_count":2662,"published_timestamp":"2021-07-06T19:52:04Z","positive_reactions_count":44,"cover_image":null,"canonical_url":"https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk","reading_time_minutes":6,"body_markdown":"\n## CSS Selectors\n\nCSS selectors are utilized to select the content you need to style. In CSS Rule Set, Selectors are the part. CSS selectors select HTML elements as per their id, class, type, attribute, etc.\n\nCSS selectors are divided into five categories:\n\n1. **Simple/Basic selectors** (select elements based on name, id, class)\n2. **Combinator selectors** (select elements based on a specific relationship between them)\n3. **Pseudo-classes selectors** (select elements based on a certain state)\n4. **Pseudo-elements selectors** (select and style a part of an element)\n5. **Attribute selectors** (select elements based on an attribute or attribute value)\n\n## Simple Selectors\n\n| Selector           | Example    | Example description                             |\n|:------------------:|:----------:|:-----------------------------------------------:|\n| #id                | #firstname | Selects the element with id=\"firstname\"         |\n| .class             | .intro     | Selects all elements with class=\"intro\"         |\n| element.class      | p.intro    | Selects only **&lt;p&gt;** elements with class=\"intro\"    |\n| *                  | *          | Selects all elements                            |\n| element            | p          | Selects all **&lt;p&gt;** elements                        |\n| element,element,.. | div, p     | Selects all **&lt;div&gt;** elements and all **&lt;p&gt;** elements |\n\n\n## Basic Selectors\n\n| Selector | Description                                            | Example                                                                   |\n|----------|--------------------------------------------------------|---------------------------------------------------------------------------|\n| element  | Type selector. Matches an element.                     | p { color: red } <br/> matches paragraphs                               |\n| .class   | Class selector. Matches the value of anclassattribute. | .warning { color: red } <br/>matches elements containing class=\"warning\" |\n| #id      | ID selector. Matches the value of an id attribute.     | #warning { color: red } <br/>matches elements containing id=\"warning\"    |\n| *        | Universal selector. Matches everything.                | * { color: red } <br/>matches everything                                 |\n\n\n## Attribute selectors\n\n|Selector|Description|Example|\n|--- |--- |--- |\n|[attribute]|Matches elements containing a given attribute.|a[href] { <br/>color: red;<br/>} <br/>matches a elements with an href attribute\n|[attribute=\"x\"]|Matches elements containing a given attribute with a given value.|a[href=\"/x/\"]<br/>{color: red;} <br/> matches a elements with the attribute and value href=\"/x/\"\n|[attribute~=\"x\"]|Matches elements containing a given attribute with a value that contains a sub-value within a space-separated list.|abbr[title~=\"x\"]<br/>{ color: red;}<br/>matches abbr elements with a title that contains 'x' (such as in title=\"Cascading Style Sheets\")\n|[attribute&#124;=\"x\"]|Matches elements containing a given attribute with a value that contains a sub-value within a hyphen-separated list.<br/>Matches html elements with a lang attribute that contains 'en' (such as in lang=\"en-gb\")\n|[attribute^=\"x\"]|Matches elements containing a given attribute with a value that starts with something.|a[href^=\"http://\"]<br/>{color: red;} matches a elements with an href attribute, the value of which begins with 'http://'|||\n|[attribute$=\"x\"]|Matches elements containing a given attribute with a value that ends with something.|a[href$=\".com\"] <br/>{color: red; }<br/>matches a elements with an href attribute, the value of which ends with '.com'\n|[attribute*=\"x\"]|Matches elements containing a given attribute with a value that contains something.|a[href*=\"hdog\"]<br/>{color: red;}<br/>matches a elements with an href attribute, the value of which contains 'hdog'\n\n\n\n## Pseudo-classes Selectors\n\n| Selector            | Description                                                                           | Example                                                                                                                         |\n|---------------------|---------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| :link               | Matches a link that has not been visited.                                             | a:link { color: blue }                                                                                                          |\n| :visited            | Matches a link that has been visited.                                                 | a:visited { color: purple }                                                                                                     |\n| :active             | Matches an element that is being activated, such as a link being clicked on.          | a:active { color: red }                                                                                                         |\n| :hover              | Matches an element whose box is being hovered over by a cursor.                       | a:hover { text-decoration: none }                                                                                               |\n| :focus              | Matches an element that has focus, such as one that has been tabbed to.               | a:focus { border: 1px solid yellow }                                                                                            |\n| :target             | Matches an element that has been linked to (via<a href=\"#x\"…,for example).            | h2:target { color: red }<br/>matches a second-level heading that has been linked to                                            |\n| :lang()             | Matches an element of a given language.                                               | p:lang(fr) { color: red }<br/>matches paragraphs that are declared, or otherwise considered, as French                         |\n| :first-child        | Matches the first child of an element.                                                | p:first-child { color: red }<br/>matches the first child, if it is a paragraph, of an element                                  |\n| :last-child         | Matches the last child of an element.                                                 | div p:last-child { color: blue }<br/>matches the last child, if it is a paragraph, of an element                               |\n| :first-of-type      | Matches the first sibling of its type in an element.                                  | li:first-of-type { color: red }<br/>matches the first instance of a list item inside an element                                |\n| :last-of-type       | Matches the last sibling of its type in an element.                                   | li:last-of-type { color: blue }<br/>matches the last instance of a list item inside an element                                 |\n| :nth-child()        | Matches an element that is the ordinal number child of its parent.                    | p:nth-child(3) { color: red }<br/>matches the third child, if it is a paragrpah, of an element                                 |\n| :nth-last-child()   | Matches an element that is the ordinal number child, in reverse order, of its parent. | p:nth-last-child(2) { color: blue }<br/>matches the next-to-last child, if it is a paragraph, of an element                    |\n| :nth-of-type()      | Matches an element that is the ordinal number sibling of its type.                    | li:nth-of-type(5) { color: red }<br/>matches the fifth instance of a list item inside an element                               |\n| :nth-last-of-type() | Matches an element that is the ordinal number sibling, in reverse order, of its type. | li:nth-of-type(5) { color: red }<br/>matches the next-to-last instance of a list item inside an element                        |\n| :only-child         | Matches an element if it is the only child of its parent.                             | article p:only-child { color: red }<br/>matches a paragraph if it is the only child of an article element                      |\n| :only-of-type       | Matches an element if it is the only sibling of its type.                             | article aside:only-of-type { color: blue }<br/>matches an aside element if it is the only aside element in an article element  |\n| :empty              | Matches an element with no children, or content.                                      | td:empty { border-color: red }<br/>matches table data cells with nothing in 'em                                                |\n| :root               | Matches the root element of a document. This will be the html element in HTML.        | :root { background: yellow }                                                                                                    |\n| :enabled            | Matches form control elements that are not disabled.                                  | input:enabled { border-color: lime }<br/>matches input elements that are not disabled                                          |\n| :disabled           | Matches form control elements that are disabled.                                      | input:enabled { border-color: red }<br/>matches input elements that are disabled                                               |\n| :checked            | Matches a radio or checkbox type input element that is checked.                       | input:checked { outline: 3px solid yellow }<br/>matches checked input elements                                                 |\n| :not()              | Negotiation pseudo-class. Matches an element that does not match a selector.          | p:not(:first-child) { color: orange }<br/>matches paragraphs that are not first children                                       |\n\n## Pseudo-elements Selectors\n\n| Selector            | Description                                                                                  | Example                                                                                                       |\n|---------------------|----------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|\n| ::first-line        | Matches the first textual line in an element.                                                | p::first-line { font-weight: bold }<br/>matches the first line in a paragraph                                |\n| ::first-letter      | Matches the first letter in an element.                                                      | p::first-letter { font-size: 2em }<br/>matches the first letter in a paragraph                               |\n| ::before            | Used with the content property to generate content before the initial content of an element. | h1::before { content: \"*\" }<br/>places an asterisk at the start of a top-level heading                       |\n| ::after             | Used with the content property to generate content after the initial content of an element.  | h1::after { content: \"+\" }<br/>places a plus-sign at the end of a top-level heading                          |\n\n## Combinator Selectors\n\n|Selector|Description|Example|\n|--- |--- |--- |\n|selector selector|Descendant combinator. Matches elements that are descendants of another element.|aside p { color: red }<br/>matches paragraphs inside elements containing class=\"warning\" |\n|selector > selector|Child combinator. Matches elements that are children of another element.|.warning > p { color: red }<br/>matches paragraphs that are children of elements containing class=\"warning\" |\n|selector + selector|Adjacent sibling combinator. Matches elements that immediately follow another element.|h1 + * { color: red }<br/>matches the first element to follow a top-level heading |\n|selector ~ selector|General sibling combinator. Matches elements that follow another element.|h2 ~ p { color: red }<br/>matches every paragraph that follows a second-level heading |\n\n## CSS Group Selector\n\nThe grouping selector in CSS picks all the HTML elements with the same style definitions.\n\n```css\nh1 { \n  text-align: center; \n  color: red; \n} \nh2 { \n  text-align: center; \n  color: red; \n} \np { \n  text-align: center; \n  color: red; \n}\n```\n\nTo minimize the code, just apply the CSS grouping selectors. Simply group the selectors by separating each selector with a comma. Let's see the following code after CSS Grouping Selectors:\n\n```css\nh1, h2, p { \n  text-align: center; \n  color: red; \n}\n```"},{"type_of":"article","id":748756,"title":"Centering in CSS - Horizontally, Vertically","description":"Centering Things in CSS is a bit hard. The problem is which way to reach for among the different ways...","published":true,"published_at":"2021-07-06T07:39:21.629Z","slug":"centering-in-css-horizontally-vertically-4bhb","path":"/dawnind/centering-in-css-horizontally-vertically-4bhb","url":"https://dev.to/dawnind/centering-in-css-horizontally-vertically-4bhb","comments_count":0,"public_reactions_count":2,"page_views_count":68,"published_timestamp":"2021-07-06T07:39:21Z","positive_reactions_count":2,"cover_image":null,"canonical_url":"https://dev.to/dawnind/centering-in-css-horizontally-vertically-4bhb","reading_time_minutes":2,"body_markdown":"Centering Things in CSS is a bit hard. The problem is which way to reach for among the different ways available to **Center Elements** in CSS. In this tutorial, I have explained how to center an element with CSS Vertically, Horizontally, at Block Levels.\n\n## How to center horizontally?\nCentering elements horizontally is quite simple compared to vertical centering. We have present different ways to center the elements horizontally. To change the text to center horizontally is quite simple. You can simply set the text-align property to center in order to center an element horizontally.\n```css\np { \n  text-align: center; \n}\n```\n\n## How to center horizontally with flexbox?\nThe modern way to center anything is to use Flexbox rather than going with the text.\n```css\n#mysection { \n  display: flex; \n  justify-content: center; \n}\n```\nAny element within my section will be centered horizontally by using the above code. There is an alternative method to go with if you don't want to use the flexbox.\n\n## How to center horizontally using CSS margin auto?\nAnything which is not text can be centered by applying an automatic margin on the left and right and set the width of the element.\n```css\nsection { \n  margin: 0 auto; \n  width: 50%; \n}\n```\nThe above `margin: 0 auto;` is a shorthand for\n```css\nsection { \n  margin-top: 0; \n  margin-bottom: 0; \n  margin-left: auto; \n  margin-right: auto; \n}\n```\nDo remember to set the item to `display: block` if it is an inline element.\n\n## How to Center Vertically using Flexbox?\nCentering an element vertically can be a difficult task. Flexbox gives us a simple way to center alignment vertically.\n```css\n#mysection { \n  display: flex; \n  align-items: center; \n}\n```\nAny element within my section will be centered vertically.\n\n## How to Center Both Vertically and Horizontally using Flexbox?\nYou can combine the flexbox techniques to center both vertically and horizontally for an element in the page.\n```css\n#mysection { \n  display: flex; \n  align-items: center; \n  justify-content: center; \n}\n```\n\n## How to Center Vertically and Horizontally using CSS Grid?\nWe can perform the same using CSS Grid:\n```css\nbody { \n  display: grid; \n  place-items: center; \n  height: 100vh; \n}\n```"},{"type_of":"article","id":748345,"title":"3 ways to display two divs side by side","description":"The most common and traditional way (inline-block)   The most common way to place two divs...","published":true,"published_at":"2021-07-05T08:59:41.396Z","slug":"3-ways-to-display-two-divs-side-by-side-3d8b","path":"/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","url":"https://dev.to/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","comments_count":4,"public_reactions_count":19,"page_views_count":173911,"published_timestamp":"2021-07-05T08:59:41Z","positive_reactions_count":19,"cover_image":null,"canonical_url":"https://dev.to/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","reading_time_minutes":4,"body_markdown":"## The most common and traditional way (inline-block)\nThe most common way to place two divs side by side is by using `inline-block` css property.\n\n**HTML**:\n\n```html\n<div class='parent'>\n  <div class='child'>child 1</div>\n  <div class='child'>child 2</div>\n</div>\n```\n\n**CSS**:\n\n```css\n.parent {\n  border: 1px solid black;\n  margin: 1rem;\n  padding: 2rem 2rem;\n  text-align: center;\n}\n.child {\n  display: inline-block;\n  border: 1px solid red;\n  padding: 1rem 1rem;\n  vertical-align: middle;\n}\n```\n\nThe output of the above styling is:\n![Two divs using inline-block](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xufvk0jr3ee7a9s4c1c.png)\n\nThe `inline-block` property on the parent placed the two divs side by side and as this is `inline-block` the `text-align` feature worked here just like an inline element does.\n\nIn child we used `verticle-align:middle` to vertically align the divs taking their center into consideration.\n\nAlso we can make space between the two divs by adding `margin-right` to the first div and/or `margin-left` to the second div.\n\nThere are several ways to place HTML divs side-by-side. The simplest and most efficient way to do this is to make use of a handful of CSS properties (i.e., float, grid, and flex).\n\n## Float Method\n\nIn the float method, we will be using the following HTML markup:\n\n**HTML**:\n\n```html\n<div class=\"float-parent-element\">\n  <div class=\"float-child-element\">\n    <div class=\"red\">Float Column 1</div>\n  </div>\n  <div class=\"float-child-element\">\n    <div class=\"yellow\">Float Column 2</div>\n  </div>\n</div>\n```\nThe `.float-parent-element` is simply the parent element that contains both `.float-child-element` elements.\n\nTo get the divs side by side, we will use the following CSS rules:\n\n**CSS**:\n\n```css\n.float-parent-element { \n    width: 50%; \n} \n.float-child-element { \n    float: left; \n    width: 50%; \n} \n.red { \n    background-color: red; \n    margin-left: 50%; \n    height: 100px; \n} \n.yellow { \n    margin-left: 50%; \n    height: 100px; \n    background-color: yellow; \n}\n```\n\nThe resulting code will look like this:\n\n![Two divs using float method](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oh6k8p0i5gznn14vc6i.png)\nI've added an initial width of 50% to the `.float-parent-element` so that it will get some width at first.\n\nThen I have added each of the `.float-child-element` a property of float left to position then side by side and a width of 50% of the parent div.\n\nFinally, for the `.float-child-element` I have added their respective colors with some height of 100px and margin to better differentiate them.\n\n## Flexbox Method\n\nWith flexbox, we can use a more intuitive way of aligning our two div elements.\n\n**HTML**:\n\n```html\n<div class=\"flex-parent-element\">\n  <div class=\"flex-child-element magenta\">Flex Column 1</div>\n  <div class=\"flex-child-element green\">Flex Column 2</div>\n</div>\n```\n\n**CSS**:\n\n```css\n.flex-parent-element {\n  display: flex;\n  width: 50%;\n}\n\n.flex-child-element {\n  flex: 1;\n  border: 2px solid blueviolet;\n  margin: 10px;\n}\n\n.flex-child-element:first-child {\n  margin-right: 20px;\n}\n```\n\nWith flexbox, we have set display: flex on the parent .flex-parent-element.\n\nThis turns on flexbox.\n\nThen in each .flex-child-element, we are setting flex: 1. This number is like a ratio comparing the widths of each child in the parent flex element.\n\nSince they are the same, the available space will be divided up equally. And since we have two child elements, they will each take up 50%.\n\nHere’s what the resulting code will look like:\n\n![Two divs using flexbox](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwuhgol5dz33goii5xmc.png)\n\n### Space between divs by using a margin, and it will still fit\n\nNotice that we’ve added space by adding margin: 10px to .flex-child-element. However, flexbox is intelligent enough to take that extra 20px into consideration when dividing up the rest of the available width.\n\nThis means you can add space with margin without having to calculate the exact pixels. Flexbox will fit the content for you!\n\n## Grid Method\n\nAnd here’s how you can place the two divs side by side, using CSS grid:\n\n**HTML**:\n\n```html\n<div class=\"grid-container-element\">\n    <div class=\"grid-child-element purple\">Grid Column 1</div>\n    <div class=\"grid-child-element green\">Grid Column 2</div\n</div>\n```\n\n**CSS**:\n\n```css\n.grid-container-element { \n    display: grid; \n    grid-template-columns: 1fr 1fr; \n    grid-gap: 20px; \n    border: 1px solid black; \n    width: 50%; \n} \n.grid-child-element { \n    margin: 10px; \n    border: 1px solid red; \n}\n```\n\nAnd here’s what the code will look like:\n\n![Two divs using grid](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um77ip92tvvvw8exgk73.png)\n\nOne big change with the grid is that you first determine what the grid template will look like. Meaning how many columns and/or rows you want in your layout.\n\nIn our case, we want two columns of equal width. So in the parent .grid-container-element, we turn the grid on with display: grid. Then we add in how many columns we want in our layout with the grid-template-columns property.\n\nWe want two columns of equal width, so we set it to 1fr 1fr. This tells the browser to create a two-column layout, and each column takes up 1fr (fr = fractional unit) of space.\n\nThe fr unit is a ratio of each column to another, similar to the flex: 1 rule we used in the flexbox method. Having the columns set to 1fr 1fr means that each column will take up the same amount of space.\n\n### Space between grid items with the grid-gap property\n\nOne big benefit to using a CSS grid is that you don’t need to use padding or margin to add space between grid items.\n\nYou can use the grid-gap (or gap in newer browsers) to automatically add space in your grid template.\n\nWe’ve set grid-gap to 20px, so the browser will know to add 20px of space between all items, whether they are side by side or stacked."}]