[{"type_of":"article","id":758241,"title":"Authentication with credentials using Next-Auth and MongoDB - Part 1","description":"Authentication can be a bit sketchy sometimes as we have to keep so much in mind, like session...","published":true,"published_at":"2021-07-13T15:32:35.792Z","slug":"authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","path":"/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","comments_count":0,"public_reactions_count":3,"page_views_count":59,"published_timestamp":"2021-07-13T15:32:35Z","body_markdown":"Authentication can be a bit sketchy sometimes as we have to keep so much in mind, like session management, protecting several routes/pages, hashing passwords, validating user's credentials during sign-up and sign-in. Also, creating a authentication from scratch can be a lot of work.\n\nIf you're working with Next.JS, then you should try using [Next-Auth](https://next-auth.js.org/) as it provides many authentication schemes like JWT, cookie, etc. And also using third party authentication providers like Google, Facebook and (yes!) even with Discord.\n\nAlso next-auth helps in session management so that the server can't be tricked easily.\n\nProviders aside, we will be looking into setting up authentication based on users' credentials like email and password.\n\n## Things to consider during authentication\n\n1. Client form validation\n2. Server form value validation\n3. Hashing users' password during sign-up for obvious reason\n4. Storing into a database\n5. Checking of hashed password during sign-in\n6. Protecting routes for non-authenticated user\n7. Proper error handling for both frontend and backend\n\n## Packages we need\n\nI am using Next.js as the framework for the demonstration.\n\n### Along with that\n\n* **next-auth** for authentication\n* **bycryptjs** for hashing the passwords\n* **mongodb** for MongoDB functions\n\n_**NOTE**_ \n\nThis is not a frontend tutorial so I'll not be covering any notifications on successful events and/or CSS stuff.\n\n## Website scaffolding\n\nThe website is very simple consisting of 4 pages and obviously a navbar for better demonstration:\n\n* Homepage\n\n![Homepage](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rb0mvdq1zitarwmp8l1.png)\n\n* Sign In / Sign Up page\n\n![Sign In / Sign Up page](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrk75irq9a4gx8gvhbqy.png)\n\n* Change password page\n\n![Change password page](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntre9injcpyzhbs4fmf.png)\n\n## Install packages and setting up database\n\n```\nnpm i next-auth mongodb bycryptjs\n```\n\nDuring install, we will sign up for free MongoDB account on their website.\n\nNow, we can connect to that database using the connect code from their dashboard. We should use the MongoURL from inside of a `.env.local` file for more refined and secure code.\n\n## Sign Up Route\n\nBefore sign-in, users need to signup for that particular website. NextJS provides us to write api codes in the `pages/api` folder using NodeJS environment. It will also follow the same folder structured route.\n\nFor sign-up route we will create a route `pages/api/auth/signup.js`. We also need to make sure that only **POST** method is accepted and nothing else.\n\n### Things to do in the signup route\n\n* Get users credentials\n* Validate\n* Send error code if any\n* Connect to database\n* Check if any existing user is present with same email address\n* Hash password using bycrypt js\n\nbycrypt js returns a **Promise** during hashing of password so we need to **await** for the response.\n\n```js\npassword: await hash(password, 12)\n//hash(plain text, no. of salting rounds)\n```\n\n* If all goes well, send response and close connection with database\n\n```js\nimport { MongoClient } from 'mongodb';\nimport { hash } from 'bcryptjs';\nasync function handler(req, res) {\n\t//Only POST mothod is accepted\n\tif (req.method === 'POST') {\n\t\t//Getting email and password from body\n\t\tconst { email, password } = req.body;\n\t\t//Validate\n\t\tif (!email || !email.includes('@') || !password) {\n\t\t\tres.status(422).json({ message: 'Invalid Data' });\n\t\t\treturn;\n\t\t}\n\t\t//Connect with database\n\t\tconst client = await MongoClient.connect(\n\t\t\t`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_CLUSTER}.n4tnm.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`,\n\t\t\t{ useNewUrlParser: true, useUnifiedTopology: true }\n\t\t);\n\t\tconst db = client.db();\n\t\t//Check existing\n\t\tconst checkExisting = await db\n\t\t\t.collection('users')\n\t\t\t.findOne({ email: email });\n\t\t//Send error response if duplicate user is found\n\t\tif (checkExisting) {\n\t\t\tres.status(422).json({ message: 'User already exists' });\n\t\t\tclient.close();\n\t\t\treturn;\n\t\t}\n\t\t//Hash password\n\t\tconst status = await db.collection('users').insertOne({\n\t\t\temail,\n\t\t\tpassword: await hash(password, 12),\n\t\t});\n\t\t//Send success response\n\t\tres.status(201).json({ message: 'User created', ...status });\n\t\t//Close DB connection\n\t\tclient.close();\n\t} else {\n\t\t//Response for other than POST method\n\t\tres.status(500).json({ message: 'Route not valid' });\n\t}\n}\n\nexport default handler;\n```\n\nNow that our signup route is in place, it's time to connect the frontend to the backend.\n\n## Posting Sign Up form\n\n```js\nimport { signIn } from 'next-auth/client';\n//...\nconst onFormSubmit = async (e) => {\n\t\te.preventDefault();\n\t\t//Getting value from useRef()\n\t\tconst email = emailRef.current.value;\n\t\tconst password = passwordRef.current.value;\n\t\t//Validation\n\t\tif (!email || !email.includes('@') || !password) {\n\t\t\talert('Invalid details');\n\t\t\treturn;\n\t\t}\n\t\t//POST form values\n\t\tconst res = await fetch('/api/auth/signup', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: email,\n\t\t\t\tpassword: password,\n\t\t\t}),\n\t\t});\n\t\t//Await for data for any desirable next steps\n\t\tconst data = await res.json();\n\t\tconsole.log(data);\n\t};\n//...\n```\n\nWith the Sign Up login in place, let's work with the Sign In logic.\n\n## Sign In using Next-Auth\n\nNext-Auth provides us with **Client API** as well as **REST API**\n\n> The [NextAuth.js client](https://next-auth.js.org/getting-started/client) library makes it easy to interact with sessions from React applications.\n\n> NextAuth.js exposes a [REST API](https://next-auth.js.org/getting-started/rest-api) which is used by the NextAuth.js client.\n\nWe will use both for signing in the users.\n\n> To add NextAuth.js to a project create a file called `[...nextauth].js` in `pages/api/auth`.\n\n> All requests to `/api/auth/*` (signin, callback, signout, etc) will automatically be handed by NextAuth.js.\n\nWith this help from next-auth we need to implement out own sign in logic for checking users stored on database.\n\n### Things to do in the signin route\n\n* Configure to use JWT\n* Specify provider from next-auth (Credentials)\n\nFor more providers, [check](https://next-auth.js.org/configuration/providers)\n\n* Connect to database\n* Check if user is present\n* Send error response if any\n* Compare hashed password with the password stored on DB\n* Send response\n* Close DB connection\n\nIn `[...nextauth].js`:\n\n```js\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { MongoClient } from 'mongodb';\nimport { compare } from 'bcryptjs';\n\nexport default NextAuth({\n\t//Configure JWT\n\tsession: {\n\t\tjwt: true,\n\t},\n\t//Specify Provider\n\tproviders: [\n\t\tProviders.Credentials({\n\t\t\tasync authorize(credentials) {\n\t\t\t\t//Connect to DB\n\t\t\t\tconst client = await MongoClient.connect(\n\t\t\t\t\t`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_CLUSTER}.n4tnm.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`,\n\t\t\t\t\t{ useNewUrlParser: true, useUnifiedTopology: true }\n\t\t\t\t);\n\t\t\t\t//Get all the users\n\t\t\t\tconst users = await client.db().collection('users');\n\t\t\t\t//Find user with the email\t\n\t\t\t\tconst result = await users.findOne({\n\t\t\t\t\temail: credentials.email,\n\t\t\t\t});\n\t\t\t\t//Not found - send error res\n\t\t\t\tif (!result) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tthrow new Error('No user found with the email');\n\t\t\t\t}\n\t\t\t\t//Check hased password with DB password\n\t\t\t\tconst checkPassword = await compare(credentials.passowrd, result.passowrd);\n\t\t\t\t//Incorrect password - send response\n\t\t\t\tif (!checkPassword) {\n\t\t\t\t\tclient.close();\n\t\t\t\t\tthrow new Error('Password doesnt match');\n\t\t\t\t}\n\t\t\t\t//Else send success response\n\t\t\t\tclient.close();\n\t\t\t\treturn { email: result.email };\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n","positive_reactions_count":3,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fxFPWLpP--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h18te2tbg7c4w3uubxy0.png","tag_list":["nextjs","mongodb","react","tutorial"],"canonical_url":"https://dev.to/dawnind/authentication-with-credentials-using-next-auth-and-mongodb-part-1-m38","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":754965,"title":"Tailwind's class based dark mode in Next.JS","description":"Tailwindcss   One of the best utility-based CSS frameworks I've ever used, period. It...","published":true,"published_at":"2021-07-09T19:55:55.662Z","slug":"tailwind-s-class-based-dark-mode-in-next-js-47gh","path":"/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","url":"https://dev.to/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","comments_count":0,"public_reactions_count":6,"page_views_count":61,"published_timestamp":"2021-07-09T19:55:55Z","body_markdown":"## Tailwindcss\n\nOne of the best utility-based CSS frameworks I've ever used, period. It provides all the necessary CSS properties with values and we ourselves have to design. It's much more awesome than Bootstrap or ChakraUI as it doesn't push us to use the component structure.\n\n> Because Tailwind is so low-level, it never encourages you to design the same site twice. Even with the same color palette and sizing scale, it's easy to build the same component with a completely different look in the next project.\n\n## How to enable class-based dark mode for Next.Js?\n\nIn the tailwindcss docs for dark mode, it provides only a basic snippet about what to write on page load for a specific page but it doesn't provide any example or docs for the framework.\n\n* To enable class-based dark mode we first have to override the value of the `darkMode` key from `false` to `'class'` in `tailwind.config.js` file.\n\n```js\nmodule.exports = {\ndarkMode: 'class',\n// ...\n}\n```\n\n* We have to edit the `_app.js` file to check if dark mode is applied or not before mounting the actual component to the DOM. For that, we will use `useEffect` from react just before returning the component.\n\nIn `_app.js`:\n\n```jsx\nimport '../styles/globals.css';\nimport { useEffect } from 'react';\nfunction MyApp({ Component, pageProps }) {\n\tuseEffect(() => {\n\t\tif (\n\t\t\tlocalStorage.theme === 'dark' ||\n\t\t\t(!('theme' in localStorage) &&\n\t\t\t\twindow.matchMedia('(prefers-color-scheme: dark)').matches)\n\t\t) {\n\t\t\t//check if there is any key for theme in local storage and if the system color theme is dark\n\t\t\tdocument.documentElement.classList.remove('light'); //OPTIONAL - remove light from the html document if any\n\t\t\tdocument.documentElement.classList.add('dark'); // add dark to the <html></html> itself as <html class='dark'></html>\n\t\t} else {\n\t\t\tdocument.documentElement.classList.remove('dark'); // remove dark from the html document if any\n\t\t\tdocument.documentElement.classList.add('light'); //OPTIONAL - add light to the <html></html> itself as <html class='light'></html>\n\t\t}\n\t},[]);\n\treturn <Component {...pageProps} />;\n}\n\nexport default MyApp;\n\n``` \n\nThis will add class to html before component mounting.\n\n![light class to html](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luevpzbox7uxo2l6a0w3.png)\n\n![dark class to html](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8jc5625dn6b7yoyt2uw.png)\n\n* We also need a theme toggler button. Add our desired toggle button and we have to keep in mind that we need two buttons one for dark and one for light mode\n\nIn `ThemeSwitch.jsx`:\n\n```jsx\nimport { useEffect, useState } from 'react';\n\nconst isDark = () => //Function that will return boolean if any of the condition is satisfied\n\t(localStorage && localStorage.theme === 'dark') || //Condition 1 - has local storage and theme = dark in local storage is found\n\t(!('theme' in localStorage) &&\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').matches); //Condition 2 - No theme key in local storage but media color scheme is dark\n\nconst getTheme = (isDark) => (isDark ? 'dark' : 'light'); //Function to return 'dark' or 'light' string\n\nconst ThemeSwitch = () => { \n\tconst [darkMode, setDarkMode] = useState(false); //State for holding theme status\n\n\tconst toggleMode = () => { //onClick handler for changing theme on button press\n        localStorage.theme = getTheme(!darkMode); //setting up local storage theme value\n\t\tif (localStorage.theme === 'dark') { // If theme is 'dark'\n\t\t\tdocument.documentElement.classList.remove('light'); // remove 'light' from html class\n\t\t\tdocument.documentElement.classList.add('dark'); // add 'dark' to html class\n\t\t} else { // if not 'dark'\n\t\t\tdocument.documentElement.classList.remove('dark'); // remove 'dark' from html class\n\t\t\tdocument.documentElement.classList.add('light'); //add 'light' to html class\n\t\t}\n\t\tsetDarkMode(!darkMode); //set dark mode state to opposite of initial value\n\t};\n\n\tuseEffect(() => {\n\t\tsetDarkMode(isDark()); //before page mount set the value of dark mode by observing theme in local storage\n\t}, []);\n\n\tconst darkModeActive =\n        process.browser && document.documentElement.classList.contains('dark'); // returns true if its a client and 'dark' is present in html\n        // process.browser is deprecated can be written as typeof window === 'undefined'\n\treturn (\n\t\t<>\n\t\t\t<button className='w-10 h-10 focus:outline-none' onClick={toggleMode}>\n\t\t\t\t<span className='sr-only'>Color mode switch button</span>\n\t\t\t\t{darkModeActive ? ( //switch mode icon according to html class 'dark' or 'light'\n\t\t\t\t\t// Light Icon Svg\n\t\t\t\t) : (\n\t\t\t\t\t// Dark Icon Svg\n\t\t\t\t)}\n\t\t\t</button>\n\t\t</>\n\t);\n};\nexport default ThemeSwitch;\n\n```\n\nNow you can add the theme switch in the navbar of your layout and can change the theme on any page.\n\n_**Note**_: Don't forget to add `dark:some-value` in the class names if you want manual control over CSS.","positive_reactions_count":6,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--ezzR70_g--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iud5nmey5wo16adnajvz.png","tag_list":["tailwindcss","react","webdev","nextjs"],"canonical_url":"https://dev.to/dawnind/tailwind-s-class-based-dark-mode-in-next-js-47gh","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":754051,"title":"CSS Specificity","description":"Specificity in CSS   CSS Specificity is the set of rules applied to CSS selectors in order...","published":true,"published_at":"2021-07-09T11:17:51.453Z","slug":"css-specificity-4n49","path":"/dawnind/css-specificity-4n49","url":"https://dev.to/dawnind/css-specificity-4n49","comments_count":0,"public_reactions_count":3,"page_views_count":53,"published_timestamp":"2021-07-09T11:17:51Z","body_markdown":"## Specificity in CSS\n\nCSS Specificity is the set of rules applied to CSS selectors in order to determine which style is applied to an element. The more specific a CSS style is, the higher the point value it accrues, and the likelier it is to be present on the element’s style.\n\n**Example**:\n\n```html\n<a class=\"container\">Some text</a>\n```\n\nIn CSS, we can specify like:\n\n```css\n.container {\n  color: blue;\n}\n```\n\nalso, we can target the paragraph tags like:\n\n```css\na {\n  color: red;\n}\n```\n\nBy understanding how styles are applied, we can ensure the styles we want to display are being rendered.\n\nBy taking CSS Specificity into account, we ensure that our code is organized, and our selectors won’t conflict with one another.\n\n## Specificity Rules\n\n* CSS style implemented by referencing outside stylesheet that has the lowest precedence and is overridden by Internal and inline CSS.\n* Internal CSS is overridden by inline CSS.\n* Inline CSS has the highest priority and overrides all other selectors.\n\n```html\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n    <style type=\"text/css\">\n      h1 {\n        background-color: black;\n        color: red;\n      }\n\n      h2 {\n        color: goldenrod;\n      }\n    </style>\n  </head>\n\n  <body>\n    <h1>\n      The specifity of internal CSS written on HTML style block is more than\n      that of external stylesheet\n    </h1>\n    <h2 style=\"color: pink;\">\n      Inline styles overides all other css styles\n    </h2>\n  </body>\n</html>\n```\n_**Output**_:\n\n![CSS Specifity](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwchz9zr10ppsway9ylk.png)\n\n## CSS Specificity Hierarchy\n\nAll selectors have a position in the Hierarchy tree of specificity.\n\nHigh -> Low :\n\n* **Inline style** : Connected directly to the element to be styled.\n_Example_: `<h1 style=”color: #ffffff;”>`\n\n* **ID**s: ID is a unique identifier for an element.\n_Example_: `#navbar`\n\n* **Classes, attributes and pseudo-classes**: Includes .classes, [attributes] and pseudo-classes like :hover, :focus etc.\n\n* **Elements and pseudo-elements**: Includes element names and pseudo-elements like h1, div, :before and :after.\n\n## Calculate Specificity\n\nStart with 0, then add 1000 for style attribute, add 100 for each of the IDs, then add 10 for each of the attributes attribute, class, or pseudo-class, and finally add 1 for each of the element name or pseudo-element.\n\n```\nh1\n#content h1\n<div id=\"content\"><h1 style=\"color: #ffffff\">Heading</h1></div>\n```\n\nThe specificity of `h1` is 1 (one element)\nThe specificity of `#content h1` is 101 (one ID reference and one element)\nThe specificity of `<div id=\"content\"><h1 style=\"color: #ffffff\">Heading</h1></div>` is 1000 (inline styling)\n\nAs 1 < 101 < 1000, the third rule (C) has a greater level of specificity, and hence it will be implemented.\n\n## How Does it Work?\n\n* **Type Selectors & Pseudo-Element**\n\n![Type Selectors & Pseudo-Element](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bg075xdg5rfoopo07h.png)\n\n_Example_:\n\n```css\np {\n} /* 0 0 0 1 */\nspan {\n} /* 0 0 0 1 */\np span {\n} /* 0 0 0 2 */\np > span {\n} /* 0 0 0 2 */\ndiv p > span {\n} /* 0 0 0 3 */\n```\n\n* **Class Selectors, attribute selectors, and pseudo-class selectors**\n\n![Class Selectors, attribute selectors, and pseudo-class selectors](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilmgnnsrnrqv8j2qstln.png)\n\n_Example_:\n\n```css\n.name {\n} /* 0 0 1 0 */\n.users .name {\n} /* 0 0 2 0 */\n[href$='.pdf'] {\n} /* 0 0 1 0 */\n:hover {\n} /* 0 0 1 0 */\n```\n\n* **ID selectors**:\n\n![ID selectors](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imylkthraj15yz41our4.png)\n\n_Example_:\n\n```css\n#name {\n} /* 0 1 0 0 */\n.user #name {\n} /* 0 1 1 0 */\n#name span {\n} /* 0 1 0 1 */\n```\n\nAlso, there is in-line styling which doesn’t use any CSS rather specify the style in-line with the HTML.\n\n_Example_:\n\n```html\n<p style=\"color: red\">Test</p> /* 1 0 0 0 */\n```\n\n## !important Rule\n\nThere is another property !important that doesn’t follow any specificity rather it is applied overriding all the CSS properties and specificities.\n\n```css\np {\n  font-size: 20px !important;\n}\n```\n\n## Tips on CSS Specificity\n\n* The universal selector (*) has no specificity value (0,0,0,0)\n\n* Pseudo-elements (e.g. :first-line) get 0,0,0,1 unlike their psuedo-class brethren which get 0,0,1,0\n\n* There’s a highly debatable topic related to using `!important` it overrides all the CSS values. It is also a good practice not to use any id selectors and !important but class selectors.\n\n* The pseudo-class : not() adds no specificity by itself, only what’s inside its parentheses.","positive_reactions_count":3,"cover_image":null,"tag_list":["css","beginners","webdev"],"canonical_url":"https://dev.to/dawnind/css-specificity-4n49","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":753523,"title":"How to Setup Tailwind with PurgeCSS and PostCSS?","description":"Tailwind Installation   We have to install tailwind via npm or yarn:    npm init -y npm...","published":true,"published_at":"2021-07-08T10:02:37.367Z","slug":"how-to-setup-tailwind-with-purgecss-and-postcss-3341","path":"/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","url":"https://dev.to/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","comments_count":0,"public_reactions_count":3,"page_views_count":74,"published_timestamp":"2021-07-08T10:02:37Z","body_markdown":"## Tailwind Installation\n\nWe have to install tailwind via npm or yarn:\n\n```\nnpm init -y\nnpm install tailwindcss\n```\n\n## Create the Configuration File\n\nWe have to create a configuration for a tailwind to use:\n\n```\nnpx tailwind init\n```\n\nThis will create a file named tailwind.config.js in the root location of our project folder.\n\n## PostCSS Config Tailwind\n\nTailwind needs PostCSS (PostCSS is a software development tool that uses JavaScript-based plugins to automate routine CSS operations) and autoprefixer (Autoprefixer will use the data based on current browser popularity and property support to apply prefixes for you) to work. So we need to apply that in the postcss.config.js file:\n\n```js\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    require('autoprefixer')\n  ]\n}\n```\n\n_**Note**_: If the postcss.config.js doesn’t exist, we have to create one.\n\nWe need to install PostCSS and autoprefixer from npm too:\n\n```\nnpm install autoprefixer\nnpm install -g postcss-cli\n```\n\n## How to Create the Tailwind CSS File?\n\nNow, we will create a CSS file `(style.css)` and add these lines at the top:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n## Create the build command\n\nWe need to specify a build command that will help us to generate the actual CSS file after compiling with PostCSS and autoprefixer. For that, we need to add the command to the `package.json` file at scripts like:\n\n```js\n\"scripts\": {\n  \"build:css\": \"postcss src/tailwind.css -o static/dist/tailwind.css\"\n}\n```\n\n## Build Tailwind\n\nFor building the final CSS file we need to run the command `npm run build` in the root of the project folder.\n\nThe resulting file is in `static/dist/tailwind.css`\n\n### Automatically regenerate the CSS upon file changes\n\nThere is a great npm package that will compile our CSS in real-time without running the build command every time after edits. For that we need to install the watch using the command:\n\n```\nnpm install watch\n```\n\nThen we need to edit the `package.json` file at scripts like:\n\n```js\n\"scripts\": {\n  \"build:css\": \"postcss src/tailwind.css -o static/dist/tailwind.css\",\n  \"watch\": \"watch 'npm run build:css' ./layouts\"\n}\n```\n\nNow for running we simply need to execute the command `npm run watch` and it’s all good.\n\n## Trim the File Size\n\nIf we check the final CSS file i.e after building, we can see that it’s huge in size. That large file is never appropriate for web pages. For that, we can actually trim the file to make it smaller than the original.\n\nWe need to install two more npm packages:\n\n```\nnpm install cssnano\nnpm install @fullhuman/postcss-purgecss\n```\n\n### What is PurgeCSS?\n\nPurgeCSS is a development tool used for removing the unused CSS in a Project. It is the default library to control the Tailwind CSS Bundle Sizes. It removes unused styles and optimizes CSS Build Sizes.\n\n## How to Remove Unused Classes from Tailwind with PurgeCSS?\n\nTo remove unused CSS we use the following code. Then we add this to our PostCSS configuration file `postcss.config.js`:\n\n```js\nconst purgecss = require('@fullhuman/postcss-purgecss')\nconst cssnano = require('cssnano')\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    require('autoprefixer'),\n    cssnano({\n      preset: 'default'\n    }),\n    purgecss({\n      content: ['./layouts/**/*.html', './src/**/*.vue', './src/**/*.jsx'],\n      defaultExtractor: content => content.match(/[\\w-/:]+(?<!:)/g) || []\n    })\n  ]\n}\n```\n\n### In development, avoid too much processing\n\nIn development, we can use this just to add prefixes and remove comments. We need to edit the `postcss.config.js` like:\n\n```js\nconst purgecss = require('@fullhuman/postcss-purgecss')\nconst cssnano = require('cssnano')\nmodule.exports = {\n  plugins: [\n    require('tailwindcss'),\n    process.env.NODE_ENV === 'production' ? require('autoprefixer') : null,\n    process.env.NODE_ENV === 'production'\n      ? cssnano({ preset: 'default' })\n      : null,\n    purgecss({\n      content: ['./layouts/**/*.html', './src/**/*.vue', './src/**/*.jsx'],\n      defaultExtractor: content => content.match(/[\\w-/:]+(?<!:)/g) || []\n    })\n  ]\n}\n```","positive_reactions_count":3,"cover_image":null,"tag_list":["css","tailwindcss","webdev","beginners"],"canonical_url":"https://dev.to/dawnind/how-to-setup-tailwind-with-purgecss-and-postcss-3341","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":751632,"title":"CSS3 selectors Cheat Sheet","description":"CSS Selectors   CSS selectors are utilized to select the content you need to style. In CSS...","published":true,"published_at":"2021-07-06T19:52:04.113Z","slug":"css3-selectors-cheat-sheet-6dk","path":"/dawnind/css3-selectors-cheat-sheet-6dk","url":"https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk","comments_count":2,"public_reactions_count":38,"page_views_count":285,"published_timestamp":"2021-07-06T19:52:04Z","body_markdown":"## CSS Selectors\n\nCSS selectors are utilized to select the content you need to style. In CSS Rule Set, Selectors are the part. CSS selectors select HTML elements as per their id, class, type, attribute, etc.\n\nCSS selectors are divided into five categories:\n\n1. **Simple/Basic selectors** (select elements based on name, id, class)\n2. **Combinator selectors** (select elements based on a specific relationship between them)\n3. **Pseudo-classes selectors** (select elements based on a certain state)\n4. **Pseudo-elements selectors** (select and style a part of an element)\n5. **Attribute selectors** (select elements based on an attribute or attribute value)\n\n## Simple Selectors\n\n| Selector           | Example    | Example description                             |\n|:------------------:|:----------:|:-----------------------------------------------:|\n| #id                | #firstname | Selects the element with id=\"firstname\"         |\n| .class             | .intro     | Selects all elements with class=\"intro\"         |\n| element.class      | p.intro    | Selects only <p> elements with class=\"intro\"    |\n| *                  | *          | Selects all elements                            |\n| element            | p          | Selects all <p> elements                        |\n| element,element,.. | div, p     | Selects all \\<div> elements and all \\<p> elements |\n\n\n## Basic Selectors\n\n| Selector | Description                                            | Example                                                                   |\n|----------|--------------------------------------------------------|---------------------------------------------------------------------------|\n| element  | Type selector. Matches an element.                     | p { color: red }\nmatches paragraphs                               |\n| .class   | Class selector. Matches the value of anclassattribute. | .warning { color: red }\nmatches elements containing class=\"warning\" |\n| #id      | ID selector. Matches the value of an id attribute.     | #warning { color: red }\nmatches elements containing id=\"warning\"    |\n| *        | Universal selector. Matches everything.                | * { color: red }\nmatches everything                                 |\n\n\n## Attribute selectors\n\n|Selector|Description|Example|\n|--- |--- |--- |\n|[attribute]|Matches elements containing a given attribute.|a[href] { <br/>color: red;<br/>}|\n|matches a elements with an href attribute|||\n|[attribute=\"x\"]|Matches elements containing a given attribute with a given value.|a[href=\"/x/\"]<br/>{color: red;}|\n|matches a elements with the attribute and value href=\"/x/\"|||\n|[attribute~=\"x\"]|Matches elements containing a given attribute with a value that contains a sub-value within a space-separated list.|abbr[title~=\"x\"]<br/>{ color: red;}|\n|matches abbr elements with a title that contains 'x' (such as in title=\"Cascading Style Sheets\")|||\n|[attribute&#124;=\"x\"]|Matches elements containing a given attribute with a value that contains a sub-value within a hyphen-separated list.|\n|matches html elements with a lang attribute that contains 'en' (such as in lang=\"en-gb\") |||\n|[attribute^=\"x\"]|Matches elements containing a given attribute with a value that starts with something.|a[href^=\"http://\"]<br/>{color: red;}|\n|matches a elements with an href attribute, the value of which begins with 'http://'|||\n|[attribute$=\"x\"]|Matches elements containing a given attribute with a value that ends with something.|a[href$=\".com\"] <br/>{color: red; }|\n|matches a elements with an href attribute, the value of which ends with '.com'|||\n|[attribute*=\"x\"]|Matches elements containing a given attribute with a value that contains something.|a[href*=\"hdog\"]<br/>{color: red;}|\n|matches a elements with an href attribute, the value of which contains 'hdog'|||\n\n\n\n## Pseudo-classes Selectors\n\n| Selector            | Description                                                                           | Example                                                                                                                         |\n|---------------------|---------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| :link               | Matches a link that has not been visited.                                             | a:link { color: blue }                                                                                                          |\n| :visited            | Matches a link that has been visited.                                                 | a:visited { color: purple }                                                                                                     |\n| :active             | Matches an element that is being activated, such as a link being clicked on.          | a:active { color: red }                                                                                                         |\n| :hover              | Matches an element whose box is being hovered over by a cursor.                       | a:hover { text-decoration: none }                                                                                               |\n| :focus              | Matches an element that has focus, such as one that has been tabbed to.               | a:focus { border: 1px solid yellow }                                                                                            |\n| :target             | Matches an element that has been linked to (via<a href=\"#x\"…,for example).            | h2:target { color: red }\nmatches a second-level heading that has been linked to                                            |\n| :lang()             | Matches an element of a given language.                                               | p:lang(fr) { color: red }\n matches paragraphs that are declared, or otherwise considered, as French                         |\n| :first-child        | Matches the first child of an element.                                                | p:first-child { color: red }\n matches the first child, if it is a paragraph, of an element                                  |\n| :last-child         | Matches the last child of an element.                                                 | div p:last-child { color: blue }\n matches the last child, if it is a paragraph, of an element                               |\n| :first-of-type      | Matches the first sibling of its type in an element.                                  | li:first-of-type { color: red }\n matches the first instance of a list item inside an element                                |\n| :last-of-type       | Matches the last sibling of its type in an element.                                   | li:last-of-type { color: blue }\n matches the last instance of a list item inside an element                                 |\n| :nth-child()        | Matches an element that is the ordinal number child of its parent.                    | p:nth-child(3) { color: red }\n matches the third child, if it is a paragrpah, of an element                                 |\n| :nth-last-child()   | Matches an element that is the ordinal number child, in reverse order, of its parent. | p:nth-last-child(2) { color: blue }\n matches the next-to-last child, if it is a paragraph, of an element                    |\n| :nth-of-type()      | Matches an element that is the ordinal number sibling of its type.                    | li:nth-of-type(5) { color: red }\n matches the fifth instance of a list item inside an element                               |\n| :nth-last-of-type() | Matches an element that is the ordinal number sibling, in reverse order, of its type. | li:nth-of-type(5) { color: red }\n matches the next-to-last instance of a list item inside an element                        |\n| :only-child         | Matches an element if it is the only child of its parent.                             | article p:only-child { color: red }\n matches a paragraph if it is the only child of an article element                      |\n| :only-of-type       | Matches an element if it is the only sibling of its type.                             | article aside:only-of-type { color: blue }\n matches an aside element if it is the only aside element in an article element  |\n| :empty              | Matches an element with no children, or content.                                      | td:empty { border-color: red }\n matches table data cells with nothing in 'em                                                |\n| :root               | Matches the root element of a document. This will be the html element in HTML.        | :root { background: yellow }                                                                                                    |\n| :enabled            | Matches form control elements that are not disabled.                                  | input:enabled { border-color: lime }\n matches input elements that are not disabled                                          |\n| :disabled           | Matches form control elements that are disabled.                                      | input:enabled { border-color: red }\n matches input elements that are disabled                                               |\n| :checked            | Matches a radio or checkbox type input element that is checked.                       | input:checked { outline: 3px solid yellow }\n matches checked input elements                                                 |\n| :not()              | Negotiation pseudo-class. Matches an element that does not match a selector.          | p:not(:first-child) { color: orange }\n matches paragraphs that are not first children                                       |\n\n## Pseudo-elements Selectors\n\n| Selector            | Description                                                                                  | Example                                                                                                       |\n|---------------------|----------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|\n| ::first-line        | Matches the first textual line in an element.                                                | p::first-line { font-weight: bold }\n matches the first line in a paragraph                                |\n| ::first-letter      | Matches the first letter in an element.                                                      | p::first-letter { font-size: 2em }\n matches the first letter in a paragraph                               |\n| ::before            | Used with the content property to generate content before the initial content of an element. | h1::before { content: \"*\" }\n places an asterisk at the start of a top-level heading                       |\n| ::after             | Used with the content property to generate content after the initial content of an element.  | h1::after { content: \"+\" }\n places a plus-sign at the end of a top-level heading                          |\n\n## Combinator Selectors\n\n|Selector|Description|Example|\n|--- |--- |--- |\n|selector selector|Descendant combinator. Matches elements that are descendants of another element.|aside p { color: red }\n matches paragraphs inside elements containing class=\"warning\" |\n|selector > selector|Child combinator. Matches elements that are children of another element.|.warning > p { color: red }\n matches paragraphs that are children of elements containing class=\"warning\" |\n|selector + selector|Adjacent sibling combinator. Matches elements that immediately follow another element.|h1 + * { color: red }\n matches the first element to follow a top-level heading |\n|selector ~ selector|General sibling combinator. Matches elements that follow another element.|h2 ~ p { color: red }\n matches every paragraph that follows a second-level heading |\n\n## CSS Group Selector\n\nThe grouping selector in CSS picks all the HTML elements with the same style definitions.\n\n```css\nh1 { \n  text-align: center; \n  color: red; \n} \nh2 { \n  text-align: center; \n  color: red; \n} \np { \n  text-align: center; \n  color: red; \n}\n```\n\nTo minimize the code, just apply the CSS grouping selectors. Simply group the selectors by separating each selector with a comma. Let's see the following code after CSS Grouping Selectors:\n\n```css\nh1, h2, p { \n  text-align: center; \n  color: red; \n}\n```","positive_reactions_count":38,"cover_image":null,"tag_list":["beginners","webdev","css"],"canonical_url":"https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":748756,"title":"Centering in CSS - Horizontally, Vertically","description":"Centering Things in CSS is a bit hard. The problem is which way to reach for among the different ways...","published":true,"published_at":"2021-07-06T07:39:21.629Z","slug":"centering-in-css-horizontally-vertically-4bhb","path":"/dawnind/centering-in-css-horizontally-vertically-4bhb","url":"https://dev.to/dawnind/centering-in-css-horizontally-vertically-4bhb","comments_count":0,"public_reactions_count":1,"page_views_count":28,"published_timestamp":"2021-07-06T07:39:21Z","body_markdown":"Centering Things in CSS is a bit hard. The problem is which way to reach for among the different ways available to **Center Elements** in CSS. In this tutorial, I have explained how to center an element with CSS Vertically, Horizontally, at Block Levels.\n\n## How to center horizontally?\nCentering elements horizontally is quite simple compared to vertical centering. We have present different ways to center the elements horizontally. To change the text to center horizontally is quite simple. You can simply set the text-align property to center in order to center an element horizontally.\n```css\np { \n  text-align: center; \n}\n```\n\n## How to center horizontally with flexbox?\nThe modern way to center anything is to use Flexbox rather than going with the text.\n```css\n#mysection { \n  display: flex; \n  justify-content: center; \n}\n```\nAny element within my section will be centered horizontally by using the above code. There is an alternative method to go with if you don't want to use the flexbox.\n\n## How to center horizontally using CSS margin auto?\nAnything which is not text can be centered by applying an automatic margin on the left and right and set the width of the element.\n```css\nsection { \n  margin: 0 auto; \n  width: 50%; \n}\n```\nThe above `margin: 0 auto;` is a shorthand for\n```css\nsection { \n  margin-top: 0; \n  margin-bottom: 0; \n  margin-left: auto; \n  margin-right: auto; \n}\n```\nDo remember to set the item to `display: block` if it is an inline element.\n\n## How to Center Vertically using Flexbox?\nCentering an element vertically can be a difficult task. Flexbox gives us a simple way to center alignment vertically.\n```css\n#mysection { \n  display: flex; \n  align-items: center; \n}\n```\nAny element within my section will be centered vertically.\n\n## How to Center Both Vertically and Horizontally using Flexbox?\nYou can combine the flexbox techniques to center both vertically and horizontally for an element in the page.\n```css\n#mysection { \n  display: flex; \n  align-items: center; \n  justify-content: center; \n}\n```\n\n## How to Center Vertically and Horizontally using CSS Grid?\nWe can perform the same using CSS Grid:\n```css\nbody { \n  display: grid; \n  place-items: center; \n  height: 100vh; \n}\n```","positive_reactions_count":1,"cover_image":null,"tag_list":["css","html","beginners","webdev"],"canonical_url":"https://dev.to/dawnind/centering-in-css-horizontally-vertically-4bhb","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":748345,"title":"3 ways to display two divs side by side","description":"The most common and traditional way (inline-block)   The most common way to place two divs...","published":true,"published_at":"2021-07-05T08:59:41.396Z","slug":"3-ways-to-display-two-divs-side-by-side-3d8b","path":"/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","url":"https://dev.to/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","comments_count":2,"public_reactions_count":6,"page_views_count":94,"published_timestamp":"2021-07-05T08:59:41Z","body_markdown":"## The most common and traditional way (inline-block)\nThe most common way to place two divs side by side is by using `inline-block` css property.\n\n**HTML**:\n\n```html\n<div class='parent'>\n  <div class='child'>child 1</div>\n  <div class='child'>child 2</div>\n</div>\n```\n\n**CSS**:\n\n```css\n.parent {\n  border: 1px solid black;\n  margin: 1rem;\n  padding: 2rem 2rem;\n  text-align: center;\n}\n.child {\n  display: inline-block;\n  border: 1px solid red;\n  padding: 1rem 1rem;\n  vertical-align: middle;\n}\n```\n\nThe output of the above styling is:\n![Two divs using inline-block](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xufvk0jr3ee7a9s4c1c.png)\n\nThe `inline-block` property on the parent placed the two divs side by side and as this is `inline-block` the `text-align` feature worked here just like an inline element does.\n\nIn child we used `verticle-align:middle` to vertically align the divs taking their center into consideration.\n\nAlso we can make space between the two divs by adding `margin-right` to the first div and/or `margin-left` to the second div.\n\nThere are several ways to place HTML divs side-by-side. The simplest and most efficient way to do this is to make use of a handful of CSS properties (i.e., float, grid, and flex).\n\n## Float Method\n\nIn the float method, we will be using the following HTML markup:\n\n**HTML**:\n\n```html\n<div class=\"float-parent-element\">\n  <div class=\"float-child-element\">\n    <div class=\"red\">Float Column 1</div>\n  </div>\n  <div class=\"float-child-element\">\n    <div class=\"yellow\">Float Column 2</div>\n  </div>\n</div>\n```\nThe `.float-parent-element` is simply the parent element that contains both `.float-child-element` elements.\n\nTo get the divs side by side, we will use the following CSS rules:\n\n**CSS**:\n\n```css\n.float-parent-element { \n    width: 50%; \n} \n.float-child-element { \n    float: left; \n    width: 50%; \n} \n.red { \n    background-color: red; \n    margin-left: 50%; \n    height: 100px; \n} \n.yellow { \n    margin-left: 50%; \n    height: 100px; \n    background-color: yellow; \n}\n```\n\nThe resulting code will look like this:\n\n![Two divs using float method](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oh6k8p0i5gznn14vc6i.png)\nI've added an initial width of 50% to the `.float-parent-element` so that it will get some width at first.\n\nThen I have added each of the `.float-child-element` a property of float left to position then side by side and a width of 50% of the parent div.\n\nFinally, for the `.float-child-element` I have added their respective colors with some height of 100px and margin to better differentiate them.\n\n## Flexbox Method\n\nWith flexbox, we can use a more intuitive way of aligning our two div elements.\n\n**HTML**:\n\n```html\n<div class=\"flex-parent-element\">\n  <div class=\"flex-child-element magenta\">Flex Column 1</div>\n  <div class=\"flex-child-element green\">Flex Column 2</div>\n</div>\n```\n\n**CSS**:\n\n```css\n.flex-parent-element {\n  display: flex;\n  width: 50%;\n}\n\n.flex-child-element {\n  flex: 1;\n  border: 2px solid blueviolet;\n  margin: 10px;\n}\n\n.flex-child-element:first-child {\n  margin-right: 20px;\n}\n```\n\nWith flexbox, we have set display: flex on the parent .flex-parent-element.\n\nThis turns on flexbox.\n\nThen in each .flex-child-element, we are setting flex: 1. This number is like a ratio comparing the widths of each child in the parent flex element.\n\nSince they are the same, the available space will be divided up equally. And since we have two child elements, they will each take up 50%.\n\nHere’s what the resulting code will look like:\n\n![Two divs using flexbox](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwuhgol5dz33goii5xmc.png)\n\n### Space between divs by using a margin, and it will still fit\n\nNotice that we’ve added space by adding margin: 10px to .flex-child-element. However, flexbox is intelligent enough to take that extra 20px into consideration when dividing up the rest of the available width.\n\nThis means you can add space with margin without having to calculate the exact pixels. Flexbox will fit the content for you!\n\n## Grid Method\n\nAnd here’s how you can place the two divs side by side, using CSS grid:\n\n**HTML**:\n\n```html\n<div class=\"grid-container-element\">\n    <div class=\"grid-child-element purple\">Grid Column 1</div>\n    <div class=\"grid-child-element green\">Grid Column 2</div\n</div>\n```\n\n**CSS**:\n\n```css\n.grid-container-element { \n    display: grid; \n    grid-template-columns: 1fr 1fr; \n    grid-gap: 20px; \n    border: 1px solid black; \n    width: 50%; \n} \n.grid-child-element { \n    margin: 10px; \n    border: 1px solid red; \n}\n```\n\nAnd here’s what the code will look like:\n\n![Two divs using grid](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um77ip92tvvvw8exgk73.png)\n\nOne big change with the grid is that you first determine what the grid template will look like. Meaning how many columns and/or rows you want in your layout.\n\nIn our case, we want two columns of equal width. So in the parent .grid-container-element, we turn the grid on with display: grid. Then we add in how many columns we want in our layout with the grid-template-columns property.\n\nWe want two columns of equal width, so we set it to 1fr 1fr. This tells the browser to create a two-column layout, and each column takes up 1fr (fr = fractional unit) of space.\n\nThe fr unit is a ratio of each column to another, similar to the flex: 1 rule we used in the flexbox method. Having the columns set to 1fr 1fr means that each column will take up the same amount of space.\n\n### Space between grid items with the grid-gap property\n\nOne big benefit to using a CSS grid is that you don’t need to use padding or margin to add space between grid items.\n\nYou can use the grid-gap (or gap in newer browsers) to automatically add space in your grid template.\n\nWe’ve set grid-gap to 20px, so the browser will know to add 20px of space between all items, whether they are side by side or stacked.","positive_reactions_count":6,"cover_image":null,"tag_list":["webdev","css","html","beginners"],"canonical_url":"https://dev.to/dawnind/3-ways-to-display-two-divs-side-by-side-3d8b","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}},{"type_of":"article","id":747995,"title":"Why Use PostCSS?","description":"What is PostCSS?   PostCSS is a tool for transforming CSS with JavaScript plugins. It...","published":true,"published_at":"2021-07-04T19:27:51.658Z","slug":"why-use-postcss-3afo","path":"/dawnind/why-use-postcss-3afo","url":"https://dev.to/dawnind/why-use-postcss-3afo","comments_count":0,"public_reactions_count":5,"page_views_count":53,"published_timestamp":"2021-07-04T19:27:51Z","body_markdown":"## What is PostCSS?\nPostCSS is a tool for transforming CSS with JavaScript plugins. It provides features via its extensive plugin ecosystem to help improve your CSS writing experience. You can pick the plugins you need or even write a custom one for yourself.\n\n---\nHowever, there are PostCSS plugins that do not transform plain CSS, but operate on Sass-like syntax. One example is the PostCSS Simple Variables plugin, which allows you to implement variables (just like in Sass) that you can reuse throughout your code, as shown below.\n---\n\n```css\n$color-brand: darkgrey;\n$font-size: 1em;\nbody { color: $color-brand; \n       font-size: $font-size; \n     }\n```\n## PostCSS Installation\nYou can use yarn or npm to install PostCSS.\n```\nyarn global add postcss-cli\nnpm install -g postcss-cli\n```\nOnce you are done, the postcss command would be available in your command line.\n## Why use PostCSS?\nLet’s take a look at a few use cases for PostCSS via the power of its plugins.\n### Autoprefixing\nAs previously mentioned, the Autoprefixer plugin will add vendor prefixes to CSS properties using values from Can I Use. This reduces clutter in your code and improves readability. For example, this input:\n```css\n:fullscreen {\n}\n```\nGives this output:\n```css\n:-webkit-:full-screen {}\n:-moz-:full-screen {}\n:full-screen {}\n```\n### Using CSSNext features that browsers understand\nWith the PostCSS Preset Env plugin, you can write future CSS syntax, and the plugin will convert it to CSS that browsers will understand by working out the necessary polyfill. For example, this input:\n```css\n@custom-media --med (width <= 50rem);\n@media (--med) {\n  a { \n    &:hover {\n      color: color-mod(black alpha(54%));\n    }\n  }\n}\n```\nGives this output:\n```css\n@media (max-width: 50rem) {\n  a:hover  { \n    color: rgba(0, 0, 0, 0.54);\n  }\n}\n```\n### Avoiding errors in your CSS\n\nThe stylelint plugin points out errors in your CSS code. It supports the latest CSS syntax. For example, this input:\n```css\na { \n  color: #d3;\n}\n```\nGives this output:\n```css\napp.css\n2:10 Invalid hex color\n```\n### Using locally scoped CSS class names\nWith the CSS Modules plugin, you can write CSS that is locally scoped to components, meaning there won’t be any conflicts between your CSS class names no matter how generic they are. For example, this input:\n```css\n.name {\n  color: grey;\n}\n```\nGives this output:\n```css\n.Logo__name__SVK0g {\n  color: gray;\n}\n```\n### Creating stunning grids\nThe LostGrid plugin uses calc() to create grids based on fractions you define without the need to pass a lot of options. For example, this input:\n```css\ndiv {\n  lost-column: 1/3 \n}\n```\nGives this output:\n```css\ndiv {\n  width: calc(99.9% * 1/3 -  \n  (30px - 30px * 1/3)); \n}\ndiv:nth-child(1n) {\n  float: left; \n  margin-right: 30px; \n  clear: none; \n}\ndiv:last-child {\n  margin-right: 0; \n}\ndiv:nth-child(3n) {\n  margin-right: 0; \n  float: right; \n}\ndiv:nth-child(3n + 1) {\n  clear: both; \n}\n```\n## PostCSS Plugins\nPostCSS provides various tools for CSS Processing. Below is the list of popular plugins so that you can have an overview of what's possible to do with PostCSS.\n**autoprefixer**: It Parses your CSS and finds if some rules need a vendor prefix. Autoprefixer do so as per the Can I Use Data so you need not bother whether a feature needs a prefix, or if prefixes you use are unneeded because obsolete. You can write cleaner CSS with the help of the plugin.\n**cssnext**: This is a Babel of CSS and permits you to use modern CSS features and takes care of transpiling them to a CSS digestible to older browsers.\n\n* Adds prefixes taking help of Autoprefixer.\n* You can use CSS Variables.\n* You can even use nesting same as in Sass.\n\n**CSS Modules**: PostCSS allows you to use CSS Modules. These Modules aren't a part of CSS Standard and are a build-step process to have a scoped selectors.\n**csslint**: Linting allows us to write correct CSS and avoid errors. stylelint plugin permits you to lint CSS during the build time.\n**cssnano**: cssnano minimizes CSS and makes code optimizations so that the least amount of code is delivered in the production.\n\n## How PostCSS is different from Sass and Less?\n\nPostCSS can do the same work as preprocessors like Sass, Less, and Stylus, but PostCSS is modular and, in my experience, faster.\n\nThe main difference between PostCSS and CSS preprocessors is that you can pick the features you need. Sass and Less give you lots of features you may or may not use, and which you can’t extend.\n\nThere are also PostCSS plugins like PostCSS Sass and PreCSS, which are essentially complete replacements for Sass. This means you could literally write your own preprocessor powered by PostCSS.","positive_reactions_count":5,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--bsKueGIL--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnqua826uvd1higzwa3p.png","tag_list":["css","postcss"],"canonical_url":"https://dev.to/dawnind/why-use-postcss-3afo","user":{"name":"Mainak Das","username":"dawnind","twitter_username":null,"github_username":"DawnMD","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JvD56N6_--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--DiNb_ZuM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656554/bbe6fd60-857e-475b-b6dc-3901e1638f62.jpeg"}}]